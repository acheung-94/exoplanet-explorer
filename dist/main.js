/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/view */ \"./src/scripts/view.js\");\n/* harmony import */ var _scripts_starChart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/starChart */ \"./src/scripts/starChart.js\");\n/* harmony import */ var _scripts_planetChart__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/planetChart */ \"./src/scripts/planetChart.js\");\n/* harmony import */ var _scripts_stellarObj__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scripts/stellarObj */ \"./src/scripts/stellarObj.js\");\n/* harmony import */ var audiomotion_analyzer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! audiomotion-analyzer */ \"./node_modules/audiomotion-analyzer/src/audioMotion-analyzer.js\");\nconsole.log(`hello!`);\n\n//import * as PlanetChart from \"./scripts/planetChart\";\n\n\n\n\n\n// SECTION : RESOURCE QUERIES\nfunction getStarSystemData() {\n  let proxiedURL = `https://cors-proxy-xphi.onrender.com/?url=` + generateURL();\n  return fetch(proxiedURL).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  }).then(data => {\n    if (data.length) {\n      // ie if length is not zero\n      console.log(`data.length > 0 .. returning now`);\n      console.log(groupByHostName(data));\n      return groupByHostName(data);\n    } else {\n      // if data.lenght is zero (falsy)\n      console.log(`came up empty, trying again`);\n      return getStarSystemData();\n      //recursively call itself until data.length > 0\n    }\n  }).then(sortedData => {\n    if (sortedData) {\n      starSystemQueue = starSystemQueue.concat(sortedData);\n      console.log(starSystemQueue);\n    }\n  }).catch(err => console.error(err));\n}\nfunction getMusic() {\n  // last item, connect to soundcloud API\n}\n\n// SECTION : HELPERS\nfunction randomRARange() {\n  let ra1 = Math.floor(Math.random() * 360);\n  let ra2 = ra1 + 5;\n  if (ra2 >= 360) ra2 = 360;\n  return `ra between ${ra1} and ${ra2}`;\n}\nfunction generateURL() {\n  const url = `https://exoplanetarchive.ipac.caltech.edu/TAP/sync?query=`;\n  let dec = `between 0 and 180`;\n  let raRange = `${randomRARange()}`;\n  let plColumns = `pl_name,pl_rade,pl_bmasse,pl_dens,pl_eqt,pl_orbper,pl_orbsmax,disc_year,disc_facility,discoverymethod,`;\n  let stColumns = `hostname,st_spectype,st_teff,st_mass,st_rad,st_met,st_metratio,st_lum,rastr,decstr,sy_dist`;\n  let query = `select ${plColumns}${stColumns} from pscomppars where sy_snum = 1 and sy_pnum >= 2 and ${raRange} and dec ${dec}`;\n  //i think there might be another character encoding issue\n  query = query.split(\" \").join(\"+\");\n  let result = encodeURIComponent(`${url}${query}&format=json`);\n  return result;\n}\nfunction groupByHostName(data) {\n  let hostNames = []; // unique host systems\n  let allSystems = [];\n  if (data.length) {\n    // in the future this shouldn't be necessary. this will only be called if data.length > 0\n    data.forEach(record => {\n      if (record.hostname && !hostNames.includes(record.hostname)) {\n        hostNames.push(record.hostname);\n      }\n    });\n    hostNames.forEach(name => {\n      let system = [];\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].hostname === name) {\n          system.push(data[i]);\n        }\n      }\n      allSystems.push(system);\n    });\n  }\n  return allSystems;\n}\nfunction getMousePos(canvas, event) {\n  let pos = {};\n  let rect = canvas.getBoundingClientRect();\n  pos.x = event.clientX - rect.left;\n  pos.y = event.clientY - rect.top;\n  return pos;\n}\nfunction getDistance(mouse, object) {\n  let a = (mouse.x - object.x) ** 2;\n  let b = (mouse.y - object.y) ** 2;\n  return Math.sqrt(a + b);\n}\nfunction startAnimation() {\n  refreshKey = setInterval(() => currentView.animate(), 20);\n}\n// SECTION : VARIABLES \nlet starSystemQueue = [];\nlet refreshKey;\nlet currentView;\nlet animating = false;\nconst renderContainer = document.querySelector('.canvas-container');\nlet canvas = document.querySelector('.background'); // i think I want two canvases... one for background and one for animation... that sounds like a good idea.\nlet container = canvas.parentNode.getBoundingClientRect();\ncanvas.height = container.height;\ncanvas.width = container.width;\nlet ctx = canvas.getContext('2d');\nctx.fillStyle = \"black\";\nctx.fillRect(0, 0, canvas.width, canvas.height);\nconst audioEl = document.querySelector(\".audio\");\nconst audioMotion = new audiomotion_analyzer__WEBPACK_IMPORTED_MODULE_4__[\"default\"](document.querySelector(\".audio-container\"), {\n  source: audioEl,\n  height: 100,\n  width: 250,\n  // you can set other options below - check the docs!\n  mode: 3,\n  barSpace: .6,\n  ledBars: true\n});\n\n// SECTION : EVENT LISTENERS\nconst explore = document.querySelector(\".explore\");\nexplore.addEventListener(\"click\", function () {\n  clearInterval(refreshKey);\n  let starSystem = starSystemQueue.shift();\n  _scripts_starChart__WEBPACK_IMPORTED_MODULE_1__.populateStarChart(starSystem);\n  currentView = new _scripts_view__WEBPACK_IMPORTED_MODULE_0__[\"default\"](starSystem, canvas);\n  refreshKey = setInterval(() => currentView.animate(), 20);\n  animating = true;\n  pause.innerText = \"Pause Animation\";\n  if (starSystemQueue.length < 2) {\n    getStarSystemData(); //hit the api and refresh the queue in the background. \n  }\n});\nconst pause = document.querySelector(\".pause\");\npause.addEventListener(\"click\", () => {\n  if (animating) {\n    clearInterval(refreshKey);\n    animating = false;\n    pause.innerText = \"Resume animation\";\n  } else {\n    startAnimation();\n    animating = true;\n    pause.innerText = \"Pause animation\";\n  }\n});\ncanvas.addEventListener(\"mousemove\", event => {\n  let mousePos = getMousePos(canvas, event);\n  currentView.hostStar.planets.forEach(planet => {\n    let distance = getDistance(mousePos, planet.pos);\n    if (distance <= planet.radius + 10) {\n      console.log(planet);\n      planet.highlighted = true;\n    } else {\n      planet.highlighted = false;\n    }\n  });\n});\n\n//click on planet\ncanvas.addEventListener(\"click\", event => {\n  let mousePos = getMousePos(canvas, event);\n  currentView.hostStar.planets.forEach(planet => {\n    let distance = getDistance(mousePos, planet.pos);\n    if (distance <= planet.radius + 5) {\n      // added a 5 px radius buffer for the baby planets\n      console.log(currentView.starSystem);\n      _scripts_planetChart__WEBPACK_IMPORTED_MODULE_2__.renderPlanetChart(planet, currentView.starSystem);\n    }\n  });\n});\n\n//click on star\ncanvas.addEventListener(\"click\", event => {\n  let mousePos = getMousePos(canvas, event);\n  let distance = getDistance(mousePos, currentView.hostStar.pos);\n  if (distance <= currentView.hostStar.radius) {\n    _scripts_starChart__WEBPACK_IMPORTED_MODULE_1__.renderStarChart();\n  }\n});\n\n//close planet card\nconst closePCard = document.querySelector(\".close-pcard\");\nclosePCard.addEventListener(\"click\", event => {\n  console.log(closePCard);\n  _scripts_planetChart__WEBPACK_IMPORTED_MODULE_2__.closePlanetChart();\n});\n//close star card\nconst closeSCard = document.querySelector(\".close-scard\");\ncloseSCard.addEventListener(\"click\", event => {\n  _scripts_starChart__WEBPACK_IMPORTED_MODULE_1__.closeStarChart();\n});\nconst audioPlay = document.querySelector(\".play-audio\");\naudioPlay.addEventListener(\"click\", () => {\n  audioEl.play();\n});\nconst audioPause = document.querySelector(\".pause-audio\");\naudioPause.addEventListener(\"click\", () => {\n  audioEl.pause();\n});\nconst vUp = document.querySelector(\".vol-up\");\nvUp.addEventListener(\"click\", () => {\n  if (audioEl.volume <= 1.0) {\n    audioEl.volume += 0.1;\n  }\n});\nconst vDown = document.querySelector(\".vol-down\");\nvDown.addEventListener(\"click\", () => {\n  audioEl.volume -= 0.1;\n});\n\n// SECTION : PAGE INITIALIZATION FUNCTIONS\ngetStarSystemData();\n\n// SECTION : IGNORE\n// canvas.addEventListener(\"mousemove\", function pauseAnimation(event) {\n//     //let boundary = currentView.hostStar.radius\n//     //let planetRadii = getPlanetRadii(currentView.hostStar.planets)\n//     //let starPos = currentView.hostStar.pos\n//     //let planetPositions = getPlanetPositions(currentView.hostStar.planets)\n//     let mousePos = getMousePos(canvas, event)\n//     currentView.hostStar.planets.forEach( (planet) => {\n//         console.log(planet)\n//         let distance = getDistance(mousePos, planet.pos)\n//         if (distance <= planet.radius && animating === true){\n//             animating = false\n//             clearInterval(refreshKey)\n//         }\n//         if (distance > planet.radius && animating === false){\n//             startAnimation()\n//             animating = true\n//             console.log(`uh oh`)\n//         }\n//     })\n//     // ok. so it keeps restarting the animation because there's always\n//     // going to be one planet where the else clause is true, thus restarting\n//     // the animation...\n//     // sigh. maybe i have to just create a click to pause...\n// })//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/planetChart.js":
/*!************************************!*\
  !*** ./src/scripts/planetChart.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closePlanetChart: function() { return /* binding */ closePlanetChart; },\n/* harmony export */   populatePlanetChart: function() { return /* binding */ populatePlanetChart; },\n/* harmony export */   renderPlanetChart: function() { return /* binding */ renderPlanetChart; }\n/* harmony export */ });\nfunction populatePlanetChart(planet) {\n  //planet is a data object\n  //console.log(currentPlanetData)\n  let name = document.querySelector(\".pname\");\n  name.innerText = planet.pl_name;\n  let radius = document.querySelector(\".pradius\");\n  radius.innerText = `${planet.pl_rade * 6370} km`;\n  let mass = document.querySelector(\".pmass\");\n  mass.innerText = `${planet.pl_bmasse} x Earth mass`;\n  let density = document.querySelector(\".pdensity\");\n  density.innerText = `${planet.pl_dens} g/cm^3`;\n  let temp = document.querySelector(\".ptemp\");\n  temp.innerText = `${planet.pl_eqt || `unknown`} K`;\n  let orbper = document.querySelector(\".porb-per\");\n  orbper.innerText = `${planet.pl_orbper} days`;\n  let discYr = document.querySelector(\".pdisc-year\");\n  discYr.innerText = planet.disc_year;\n  let facility = document.querySelector(\".pdisc-facility\");\n  facility.innerText = planet.disc_facility;\n  let det = document.querySelector(\".pdisc-method\");\n  det.innerText = planet.discoverymethod;\n}\nfunction renderPlanetChart(planet, starSystem) {\n  let planetCard = document.querySelector(\".planet-card\");\n  let currentPlanetData;\n  starSystem.forEach(entry => {\n    if (planet.name === entry.pl_name) currentPlanetData = entry;\n  });\n  populatePlanetChart(currentPlanetData);\n  planetCard.style.visibility = \"visible\";\n}\nfunction closePlanetChart() {\n  let planetCard = document.querySelector(\".planet-card\"); // a way to dry this all up? :/ may not be able to since i'm exporting these functions\n  planetCard.style.visibility = \"hidden\";\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9wbGFuZXRDaGFydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxTQUFTQSxtQkFBbUJBLENBQUNDLE1BQU0sRUFBRTtFQUN4QztFQUNBO0VBQ0EsSUFBSUMsSUFBSSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxRQUFRLENBQUM7RUFDM0NGLElBQUksQ0FBQ0csU0FBUyxHQUFHSixNQUFNLENBQUNLLE9BQU87RUFFL0IsSUFBSUMsTUFBTSxHQUFHSixRQUFRLENBQUNDLGFBQWEsQ0FBQyxVQUFVLENBQUM7RUFDL0NHLE1BQU0sQ0FBQ0YsU0FBUyxHQUFJLEdBQUVKLE1BQU0sQ0FBQ08sT0FBTyxHQUFHLElBQUssS0FBSTtFQUVoRCxJQUFJQyxJQUFJLEdBQUdOLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLFFBQVEsQ0FBQztFQUMzQ0ssSUFBSSxDQUFDSixTQUFTLEdBQUksR0FBRUosTUFBTSxDQUFDUyxTQUFVLGVBQWM7RUFFbkQsSUFBSUMsT0FBTyxHQUFHUixRQUFRLENBQUNDLGFBQWEsQ0FBQyxXQUFXLENBQUM7RUFDakRPLE9BQU8sQ0FBQ04sU0FBUyxHQUFJLEdBQUVKLE1BQU0sQ0FBQ1csT0FBUSxTQUFRO0VBRTlDLElBQUlDLElBQUksR0FBR1YsUUFBUSxDQUFDQyxhQUFhLENBQUMsUUFBUSxDQUFDO0VBQzNDUyxJQUFJLENBQUNSLFNBQVMsR0FBSSxHQUFFSixNQUFNLENBQUNhLE1BQU0sSUFBSyxTQUFTLElBQUc7RUFFbEQsSUFBSUMsTUFBTSxHQUFHWixRQUFRLENBQUNDLGFBQWEsQ0FBQyxXQUFXLENBQUM7RUFDaERXLE1BQU0sQ0FBQ1YsU0FBUyxHQUFJLEdBQUVKLE1BQU0sQ0FBQ2UsU0FBVSxPQUFNO0VBRTdDLElBQUlDLE1BQU0sR0FBR2QsUUFBUSxDQUFDQyxhQUFhLENBQUMsYUFBYSxDQUFDO0VBQ2xEYSxNQUFNLENBQUNaLFNBQVMsR0FBR0osTUFBTSxDQUFDaUIsU0FBUztFQUVuQyxJQUFJQyxRQUFRLEdBQUdoQixRQUFRLENBQUNDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztFQUN4RGUsUUFBUSxDQUFDZCxTQUFTLEdBQUdKLE1BQU0sQ0FBQ21CLGFBQWE7RUFFekMsSUFBSUMsR0FBRyxHQUFHbEIsUUFBUSxDQUFDQyxhQUFhLENBQUMsZUFBZSxDQUFDO0VBQ2pEaUIsR0FBRyxDQUFDaEIsU0FBUyxHQUFHSixNQUFNLENBQUNxQixlQUFlO0FBQzFDO0FBRU8sU0FBU0MsaUJBQWlCQSxDQUFDdEIsTUFBTSxFQUFFdUIsVUFBVSxFQUFFO0VBQ2xELElBQUlDLFVBQVUsR0FBR3RCLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGNBQWMsQ0FBQztFQUN2RCxJQUFJc0IsaUJBQWlCO0VBQ3JCRixVQUFVLENBQUNHLE9BQU8sQ0FBRUMsS0FBSyxJQUFLO0lBQzFCLElBQUkzQixNQUFNLENBQUNDLElBQUksS0FBSzBCLEtBQUssQ0FBQ3RCLE9BQU8sRUFBRW9CLGlCQUFpQixHQUFHRSxLQUFLO0VBQ2hFLENBQUMsQ0FBQztFQUNGNUIsbUJBQW1CLENBQUMwQixpQkFBaUIsQ0FBQztFQUN0Q0QsVUFBVSxDQUFDSSxLQUFLLENBQUNDLFVBQVUsR0FBRyxTQUFTO0FBQzNDO0FBRU8sU0FBU0MsZ0JBQWdCQSxDQUFBLEVBQUc7RUFDL0IsSUFBSU4sVUFBVSxHQUFHdEIsUUFBUSxDQUFDQyxhQUFhLENBQUMsY0FBYyxDQUFDLEVBQUM7RUFDeERxQixVQUFVLENBQUNJLEtBQUssQ0FBQ0MsVUFBVSxHQUFHLFFBQVE7QUFFMUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy1leG9wbGFuZXQtZXhwbG9yZXIvLi9zcmMvc2NyaXB0cy9wbGFuZXRDaGFydC5qcz85NDI3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwb3B1bGF0ZVBsYW5ldENoYXJ0KHBsYW5ldCkge1xuICAgIC8vcGxhbmV0IGlzIGEgZGF0YSBvYmplY3RcbiAgICAvL2NvbnNvbGUubG9nKGN1cnJlbnRQbGFuZXREYXRhKVxuICAgIGxldCBuYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbmFtZVwiKVxuICAgIG5hbWUuaW5uZXJUZXh0ID0gcGxhbmV0LnBsX25hbWVcblxuICAgIGxldCByYWRpdXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByYWRpdXNcIilcbiAgICByYWRpdXMuaW5uZXJUZXh0ID0gYCR7cGxhbmV0LnBsX3JhZGUgKiA2MzcwfSBrbWBcblxuICAgIGxldCBtYXNzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbWFzc1wiKVxuICAgIG1hc3MuaW5uZXJUZXh0ID0gYCR7cGxhbmV0LnBsX2JtYXNzZX0geCBFYXJ0aCBtYXNzYFxuXG4gICAgbGV0IGRlbnNpdHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBkZW5zaXR5XCIpXG4gICAgZGVuc2l0eS5pbm5lclRleHQgPSBgJHtwbGFuZXQucGxfZGVuc30gZy9jbV4zYFxuXG4gICAgbGV0IHRlbXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnB0ZW1wXCIpXG4gICAgdGVtcC5pbm5lclRleHQgPSBgJHtwbGFuZXQucGxfZXF0IHx8IGB1bmtub3duYH0gS2BcblxuICAgIGxldCBvcmJwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcmItcGVyXCIpXG4gICAgb3JicGVyLmlubmVyVGV4dCA9IGAke3BsYW5ldC5wbF9vcmJwZXJ9IGRheXNgXG5cbiAgICBsZXQgZGlzY1lyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wZGlzYy15ZWFyXCIpXG4gICAgZGlzY1lyLmlubmVyVGV4dCA9IHBsYW5ldC5kaXNjX3llYXJcblxuICAgIGxldCBmYWNpbGl0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGRpc2MtZmFjaWxpdHlcIilcbiAgICBmYWNpbGl0eS5pbm5lclRleHQgPSBwbGFuZXQuZGlzY19mYWNpbGl0eVxuXG4gICAgbGV0IGRldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGRpc2MtbWV0aG9kXCIpXG4gICAgZGV0LmlubmVyVGV4dCA9IHBsYW5ldC5kaXNjb3ZlcnltZXRob2Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclBsYW5ldENoYXJ0KHBsYW5ldCwgc3RhclN5c3RlbSkge1xuICAgIGxldCBwbGFuZXRDYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbGFuZXQtY2FyZFwiKVxuICAgIGxldCBjdXJyZW50UGxhbmV0RGF0YTtcbiAgICBzdGFyU3lzdGVtLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgIGlmIChwbGFuZXQubmFtZSA9PT0gZW50cnkucGxfbmFtZSkgY3VycmVudFBsYW5ldERhdGEgPSBlbnRyeTtcbiAgICB9KVxuICAgIHBvcHVsYXRlUGxhbmV0Q2hhcnQoY3VycmVudFBsYW5ldERhdGEpO1xuICAgIHBsYW5ldENhcmQuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VQbGFuZXRDaGFydCgpIHtcbiAgICBsZXQgcGxhbmV0Q2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGxhbmV0LWNhcmRcIikgLy8gYSB3YXkgdG8gZHJ5IHRoaXMgYWxsIHVwPyA6LyBtYXkgbm90IGJlIGFibGUgdG8gc2luY2UgaSdtIGV4cG9ydGluZyB0aGVzZSBmdW5jdGlvbnNcbiAgICBwbGFuZXRDYXJkLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXG59XG5cbiJdLCJuYW1lcyI6WyJwb3B1bGF0ZVBsYW5ldENoYXJ0IiwicGxhbmV0IiwibmFtZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImlubmVyVGV4dCIsInBsX25hbWUiLCJyYWRpdXMiLCJwbF9yYWRlIiwibWFzcyIsInBsX2JtYXNzZSIsImRlbnNpdHkiLCJwbF9kZW5zIiwidGVtcCIsInBsX2VxdCIsIm9yYnBlciIsInBsX29yYnBlciIsImRpc2NZciIsImRpc2NfeWVhciIsImZhY2lsaXR5IiwiZGlzY19mYWNpbGl0eSIsImRldCIsImRpc2NvdmVyeW1ldGhvZCIsInJlbmRlclBsYW5ldENoYXJ0Iiwic3RhclN5c3RlbSIsInBsYW5ldENhcmQiLCJjdXJyZW50UGxhbmV0RGF0YSIsImZvckVhY2giLCJlbnRyeSIsInN0eWxlIiwidmlzaWJpbGl0eSIsImNsb3NlUGxhbmV0Q2hhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/planetChart.js\n");

/***/ }),

/***/ "./src/scripts/planetaryObj.js":
/*!*************************************!*\
  !*** ./src/scripts/planetaryObj.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Planet {\n  constructor(planetData, hostStar) {\n    this.hostStar = hostStar;\n    this.name = planetData[\"pl_name\"];\n    this.radius = this.scaleRadius(planetData[\"pl_rade\"], hostStar);\n    this.distance = this.scaleDistance(planetData[\"pl_orbsmax\"], hostStar);\n    this.angle = Math.random() * (Math.PI * 2); // random starting angle in radians.\n    this.color = \"pink\"; // planetData[\"pl_insol\"]\n    this.vel = this.angularVelocity(planetData[\"pl_orbper\"]); // radians per frame\n    this.pos = {\n      \"x\": hostStar.pos.x + this.distance * Math.cos(this.angle),\n      \"y\": hostStar.pos.y + this.distance * Math.sin(this.angle)\n    };\n    this.highlighted = false;\n    //console.log(this.name, this.vel) // for adjustment\n  }\n\n  // scaleColor(temp){\n  //     if (temp > 180 && temp < 280){\n  //         return \n  //     }\n  // }\n\n  scaleRadius(radius, hostStar) {\n    if (radius > 10) {\n      let conversion = hostStar.radius * 0.01;\n      let scaled = radius * conversion;\n      return scaled;\n    } else {\n      return radius;\n    }\n  }\n  scaleDistance(semiMajorAxis, hostStar) {\n    // if smax is null... give it a default value pls.\n    semiMajorAxis ??= 10;\n    return hostStar.radius + semiMajorAxis * 20;\n    // if (semiMajorAxis <= 5){\n    //     //console.log(semiMajorAxis)\n    //     let adjusted = hostStar.radius + 25 + ((semiMajorAxis/10) * 50)\n    //     //console.log(adjusted)\n    //     return adjusted\n    // }else if (semiMajorAxis > 5 && semiMajorAxis < 100) {\n    //     return hostStar.radius + 50 + ((semiMajorAxis / 100) * 50)\n\n    // }else if (semiMajorAxis >= 100 && semiMajorAxis <= 500) {\n    //     return hostStar.radius + 75 + (semiMajorAxis / 10)\n\n    // }else if (semiMajorAxis > 500){ // big distance = 150~200px rad\n    //     return (((semiMajorAxis / 1000 )+ 0.3) * 200) // ok this is just some made up stuff here but uh... tis the best i can do right now. \n    // }\n  }\n  angularVelocity(orbPer) {\n    let velocity = Math.PI * 2 / (orbPer * 50); // equates to radians per frame, ie the amount the planet must move per frame.\n    if (velocity < 0.01) {\n      velocity = (Math.random() * (1.0 - 0.5) + 0.5) * 0.01;\n    } else if (velocity > 0.1) {\n      velocity = (Math.random() * (1.0 - 0.5) + 0.5) * 0.1;\n    }\n    return velocity;\n  }\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.pos.x, this.pos.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    if (this.highlighted) {\n      let radConversion = Math.PI / 180;\n      let degStart = 10;\n      let degEnd = 80;\n      for (let i = 0; i < 4; i++) {\n        ctx.beginPath();\n        ctx.arc(this.pos.x, this.pos.y, this.radius + 10, degStart * radConversion, degEnd * radConversion);\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = \"white\";\n        ctx.stroke();\n        degStart += 90;\n        degEnd += 90;\n      }\n    }\n  }\n  move() {\n    this.angle += this.vel; // add this many radians to the current angle.\n    this.pos.x = this.hostStar.pos.x + this.distance * Math.cos(this.angle);\n    this.pos.y = this.hostStar.pos.y + this.distance * Math.sin(this.angle);\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Planet);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/planetaryObj.js\n");

/***/ }),

/***/ "./src/scripts/starChart.js":
/*!**********************************!*\
  !*** ./src/scripts/starChart.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeStarChart: function() { return /* binding */ closeStarChart; },\n/* harmony export */   populateStarChart: function() { return /* binding */ populateStarChart; },\n/* harmony export */   renderStarChart: function() { return /* binding */ renderStarChart; }\n/* harmony export */ });\n/* harmony import */ var _stellarObj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stellarObj */ \"./src/scripts/stellarObj.js\");\n\nfunction populateStarChart(starSystem) {\n  let star = starSystem[0];\n  //how should i go about this....? programatically create field names? it would be weird to iterate through and put like 17 different conditions... \n  // i could also just manually create field names in the html, then grab each name and append the data values to it. \n  let name = document.querySelector(\".host-star\");\n  name.innerText = star.hostname;\n  let spectype = document.querySelector(\".spectype\");\n  //alright get ready for some crazy stuff...\n  if (star.st_spectype) {\n    spectype.innerText = star.st_spectype;\n  } else {\n    // if data is not provided for spectral type, create a dummy star and obtain its general class.\n    let dummy = new _stellarObj__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, starSystem);\n    spectype.innerText = dummy.class;\n  }\n  let temp = document.querySelector(\".stemp\");\n  temp.innerText = `${star.st_teff} K`;\n  let mass = document.querySelector(\".smass\");\n  mass.innerText = `${star.st_mass} x solar mass`;\n  let radius = document.querySelector(\".sradius\");\n  radius.innerText = `${star.st_rad} x solar radius`;\n  let metallicity = document.querySelector(\".metallicity\");\n  metallicity.innerText = `${star.st_met} ${star.st_metratio}`;\n  let luminosity = document.querySelector(\".luminosity\");\n  luminosity.innerText = `${star.st_lum} x solar luminosity\n`;\n  let pos = document.querySelector(\".coordinates\");\n  pos.innerText = `RA: ${star.rastr}, DEC: ${star.decstr}`;\n  let distance = document.querySelector(\".distance\");\n  distance.innerText = `${star.sy_dist} parsecs`;\n}\nfunction renderStarChart() {\n  let starCard = document.querySelector(\".star-card\");\n  //populateStarChart(star);\n  starCard.style.visibility = \"visible\";\n}\nfunction closeStarChart() {\n  let starCard = document.querySelector(\".star-card\"); // a way to dry this all up? :/ may not be able to since i'm exporting these functions\n  starCard.style.visibility = \"hidden\";\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9zdGFyQ2hhcnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErQjtBQUV4QixTQUFTQyxpQkFBaUJBLENBQUNDLFVBQVUsRUFBRTtFQUMxQyxJQUFJQyxJQUFJLEdBQUdELFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDeEI7RUFDQTtFQUNBLElBQUlFLElBQUksR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsWUFBWSxDQUFDO0VBQy9DRixJQUFJLENBQUNHLFNBQVMsR0FBR0osSUFBSSxDQUFDSyxRQUFRO0VBRTlCLElBQUlDLFFBQVEsR0FBR0osUUFBUSxDQUFDQyxhQUFhLENBQUMsV0FBVyxDQUFDO0VBQ2xEO0VBQ0EsSUFBSUgsSUFBSSxDQUFDTyxXQUFXLEVBQUM7SUFDakJELFFBQVEsQ0FBQ0YsU0FBUyxHQUFHSixJQUFJLENBQUNPLFdBQVc7RUFDekMsQ0FBQyxNQUFLO0lBQUU7SUFDSixJQUFJQyxLQUFLLEdBQUcsSUFBSVgsbURBQUksQ0FBQyxDQUFDLEVBQUVFLFVBQVUsQ0FBQztJQUNuQ08sUUFBUSxDQUFDRixTQUFTLEdBQUdJLEtBQUssQ0FBQ0MsS0FBSztFQUNwQztFQUVBLElBQUlDLElBQUksR0FBR1IsUUFBUSxDQUFDQyxhQUFhLENBQUMsUUFBUSxDQUFDO0VBQzNDTyxJQUFJLENBQUNOLFNBQVMsR0FBSSxHQUFFSixJQUFJLENBQUNXLE9BQVEsSUFBRztFQUVwQyxJQUFJQyxJQUFJLEdBQUdWLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLFFBQVEsQ0FBQztFQUMzQ1MsSUFBSSxDQUFDUixTQUFTLEdBQUksR0FBRUosSUFBSSxDQUFDYSxPQUFRLGVBQWM7RUFFL0MsSUFBSUMsTUFBTSxHQUFHWixRQUFRLENBQUNDLGFBQWEsQ0FBQyxVQUFVLENBQUM7RUFDL0NXLE1BQU0sQ0FBQ1YsU0FBUyxHQUFJLEdBQUVKLElBQUksQ0FBQ2UsTUFBTyxpQkFBZ0I7RUFFbEQsSUFBSUMsV0FBVyxHQUFHZCxRQUFRLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUM7RUFDeERhLFdBQVcsQ0FBQ1osU0FBUyxHQUFJLEdBQUVKLElBQUksQ0FBQ2lCLE1BQU8sSUFBR2pCLElBQUksQ0FBQ2tCLFdBQVksRUFBQztFQUU1RCxJQUFJQyxVQUFVLEdBQUdqQixRQUFRLENBQUNDLGFBQWEsQ0FBQyxhQUFhLENBQUM7RUFDdERnQixVQUFVLENBQUNmLFNBQVMsR0FBSSxHQUFFSixJQUFJLENBQUNvQixNQUFPO0FBQzFDLENBQUM7RUFDRyxJQUFJQyxHQUFHLEdBQUduQixRQUFRLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUM7RUFDaERrQixHQUFHLENBQUNqQixTQUFTLEdBQUksT0FBTUosSUFBSSxDQUFDc0IsS0FBTSxVQUFTdEIsSUFBSSxDQUFDdUIsTUFBTyxFQUFDO0VBRXhELElBQUlDLFFBQVEsR0FBR3RCLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLFdBQVcsQ0FBQztFQUNsRHFCLFFBQVEsQ0FBQ3BCLFNBQVMsR0FBSSxHQUFFSixJQUFJLENBQUN5QixPQUFRLFVBQVM7QUFDbEQ7QUFFTyxTQUFTQyxlQUFlQSxDQUFBLEVBQUc7RUFDOUIsSUFBSUMsUUFBUSxHQUFHekIsUUFBUSxDQUFDQyxhQUFhLENBQUMsWUFBWSxDQUFDO0VBQ25EO0VBQ0F3QixRQUFRLENBQUNDLEtBQUssQ0FBQ0MsVUFBVSxHQUFHLFNBQVM7QUFDekM7QUFFTyxTQUFTQyxjQUFjQSxDQUFBLEVBQUc7RUFDN0IsSUFBSUgsUUFBUSxHQUFHekIsUUFBUSxDQUFDQyxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQUM7RUFDcER3QixRQUFRLENBQUNDLEtBQUssQ0FBQ0MsVUFBVSxHQUFHLFFBQVE7QUFDeEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy1leG9wbGFuZXQtZXhwbG9yZXIvLi9zcmMvc2NyaXB0cy9zdGFyQ2hhcnQuanM/OGY4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RhciBmcm9tIFwiLi9zdGVsbGFyT2JqXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHBvcHVsYXRlU3RhckNoYXJ0KHN0YXJTeXN0ZW0pIHtcbiAgICBsZXQgc3RhciA9IHN0YXJTeXN0ZW1bMF1cbiAgICAvL2hvdyBzaG91bGQgaSBnbyBhYm91dCB0aGlzLi4uLj8gcHJvZ3JhbWF0aWNhbGx5IGNyZWF0ZSBmaWVsZCBuYW1lcz8gaXQgd291bGQgYmUgd2VpcmQgdG8gaXRlcmF0ZSB0aHJvdWdoIGFuZCBwdXQgbGlrZSAxNyBkaWZmZXJlbnQgY29uZGl0aW9ucy4uLiBcbiAgICAvLyBpIGNvdWxkIGFsc28ganVzdCBtYW51YWxseSBjcmVhdGUgZmllbGQgbmFtZXMgaW4gdGhlIGh0bWwsIHRoZW4gZ3JhYiBlYWNoIG5hbWUgYW5kIGFwcGVuZCB0aGUgZGF0YSB2YWx1ZXMgdG8gaXQuIFxuICAgIGxldCBuYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5ob3N0LXN0YXJcIilcbiAgICBuYW1lLmlubmVyVGV4dCA9IHN0YXIuaG9zdG5hbWVcblxuICAgIGxldCBzcGVjdHlwZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3BlY3R5cGVcIilcbiAgICAvL2FscmlnaHQgZ2V0IHJlYWR5IGZvciBzb21lIGNyYXp5IHN0dWZmLi4uXG4gICAgaWYgKHN0YXIuc3Rfc3BlY3R5cGUpe1xuICAgICAgICBzcGVjdHlwZS5pbm5lclRleHQgPSBzdGFyLnN0X3NwZWN0eXBlXG4gICAgfWVsc2UgeyAvLyBpZiBkYXRhIGlzIG5vdCBwcm92aWRlZCBmb3Igc3BlY3RyYWwgdHlwZSwgY3JlYXRlIGEgZHVtbXkgc3RhciBhbmQgb2J0YWluIGl0cyBnZW5lcmFsIGNsYXNzLlxuICAgICAgICBsZXQgZHVtbXkgPSBuZXcgU3RhcigwLCBzdGFyU3lzdGVtKVxuICAgICAgICBzcGVjdHlwZS5pbm5lclRleHQgPSBkdW1teS5jbGFzc1xuICAgIH1cblxuICAgIGxldCB0ZW1wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zdGVtcFwiKVxuICAgIHRlbXAuaW5uZXJUZXh0ID0gYCR7c3Rhci5zdF90ZWZmfSBLYFxuXG4gICAgbGV0IG1hc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNtYXNzXCIpXG4gICAgbWFzcy5pbm5lclRleHQgPSBgJHtzdGFyLnN0X21hc3N9IHggc29sYXIgbWFzc2BcblxuICAgIGxldCByYWRpdXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNyYWRpdXNcIilcbiAgICByYWRpdXMuaW5uZXJUZXh0ID0gYCR7c3Rhci5zdF9yYWR9IHggc29sYXIgcmFkaXVzYFxuXG4gICAgbGV0IG1ldGFsbGljaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZXRhbGxpY2l0eVwiKVxuICAgIG1ldGFsbGljaXR5LmlubmVyVGV4dCA9IGAke3N0YXIuc3RfbWV0fSAke3N0YXIuc3RfbWV0cmF0aW99YFxuXG4gICAgbGV0IGx1bWlub3NpdHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmx1bWlub3NpdHlcIilcbiAgICBsdW1pbm9zaXR5LmlubmVyVGV4dCA9IGAke3N0YXIuc3RfbHVtfSB4IHNvbGFyIGx1bWlub3NpdHlcbmBcbiAgICBsZXQgcG9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb29yZGluYXRlc1wiKVxuICAgIHBvcy5pbm5lclRleHQgPSBgUkE6ICR7c3Rhci5yYXN0cn0sIERFQzogJHtzdGFyLmRlY3N0cn1gXG5cbiAgICBsZXQgZGlzdGFuY2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRpc3RhbmNlXCIpXG4gICAgZGlzdGFuY2UuaW5uZXJUZXh0ID0gYCR7c3Rhci5zeV9kaXN0fSBwYXJzZWNzYFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3RhckNoYXJ0KCkge1xuICAgIGxldCBzdGFyQ2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3Rhci1jYXJkXCIpXG4gICAgLy9wb3B1bGF0ZVN0YXJDaGFydChzdGFyKTtcbiAgICBzdGFyQ2FyZC5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZVN0YXJDaGFydCgpIHtcbiAgICBsZXQgc3RhckNhcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnN0YXItY2FyZFwiKSAvLyBhIHdheSB0byBkcnkgdGhpcyBhbGwgdXA/IDovIG1heSBub3QgYmUgYWJsZSB0byBzaW5jZSBpJ20gZXhwb3J0aW5nIHRoZXNlIGZ1bmN0aW9uc1xuICAgIHN0YXJDYXJkLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xufVxuXG4iXSwibmFtZXMiOlsiU3RhciIsInBvcHVsYXRlU3RhckNoYXJ0Iiwic3RhclN5c3RlbSIsInN0YXIiLCJuYW1lIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJUZXh0IiwiaG9zdG5hbWUiLCJzcGVjdHlwZSIsInN0X3NwZWN0eXBlIiwiZHVtbXkiLCJjbGFzcyIsInRlbXAiLCJzdF90ZWZmIiwibWFzcyIsInN0X21hc3MiLCJyYWRpdXMiLCJzdF9yYWQiLCJtZXRhbGxpY2l0eSIsInN0X21ldCIsInN0X21ldHJhdGlvIiwibHVtaW5vc2l0eSIsInN0X2x1bSIsInBvcyIsInJhc3RyIiwiZGVjc3RyIiwiZGlzdGFuY2UiLCJzeV9kaXN0IiwicmVuZGVyU3RhckNoYXJ0Iiwic3RhckNhcmQiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJjbG9zZVN0YXJDaGFydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/starChart.js\n");

/***/ }),

/***/ "./src/scripts/stellarObj.js":
/*!***********************************!*\
  !*** ./src/scripts/stellarObj.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _planetaryObj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./planetaryObj */ \"./src/scripts/planetaryObj.js\");\n\nclass Star {\n  constructor(canvas, starSystem) {\n    if (canvas) {\n      // if there *is* a canvas passed in, do full construction.\n      this.pos = {\n        \"x\": canvas.width / 2,\n        \"y\": canvas.height / 2\n      };\n      this.class = this.setStellarClass(starSystem[0]);\n      this.radius = this.scaleRadius(starSystem[0][\"st_rad\"]); // given stellar radius in units of radius of the sun, scale to num pixels\n      this.planets = [];\n      this.color = this.scaleColorByTemperature(starSystem[0][\"st_teff\"]);\n      this.addPlanets(starSystem);\n      //console.log(this.radius)\n    } else {\n      // if no canvas, or canvas is 0, just initialize the class.\n      this.class = this.setStellarClass(starSystem[0]);\n    }\n  }\n  setStellarClass(system) {\n    if (system[\"st_spectype\"]) {\n      // some entries have null for spectral type.\n      return system[\"st_spectype\"];\n    } else {\n      // so i have to approximate my own.\n      let kelvin = system[\"st_teff\"];\n      if (kelvin > 30000) {\n        return 'O';\n      } else if (kelvin < 30000 && kelvin > 9700) {\n        return 'B';\n      } else if (kelvin < 9700 && kelvin > 7200) {\n        return 'A';\n      } else if (kelvin < 7200 && kelvin > 5700) {\n        return 'F';\n      } else if (kelvin < 5700 && kelvin > 4900) {\n        return 'G';\n      } else if (kelvin < 4900 && kelvin > 3400) {\n        return 'K';\n      } else if (kelvin < 3400 && kelvin > 2100) {\n        return 'M';\n      }\n    }\n  }\n  scaleColorByTemperature(kelvin) {\n    let r, g, b;\n    if (kelvin > 11000) {\n      // blue\n      r = 222;\n      g = 244;\n      b = 255;\n    } else if (kelvin > 8000 && kelvin < 11000) {\n      //white\n      r = 255;\n      g = 255;\n      b = kelvin / 45;\n    } else if (kelvin > 5000 && kelvin < 8000) {\n      //yellow\n      r = 255;\n      g = kelvin / 30;\n      b = 0;\n    } else if (kelvin > 3500 && kelvin < 5000) {\n      // orange\n      r = 255;\n      g = kelvin / 200;\n      b = 0;\n    } else {\n      // < 3500 k\n      r = 215;\n      g = kelvin / 100;\n      b = 0;\n    }\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n  scaleRadius(radius) {\n    let km = radius * 695700;\n    let scaled = km * 0.00005;\n    if (scaled >= 200) {\n      return scaled * (Math.random() * (1.5 - 1.0) + 1.0);\n    } else if (scaled < 50) {\n      scaled = scaled * (Math.random() * (2.0 - 1.5) + 1.5);\n      console.log(`resized: ${scaled}`);\n      return scaled;\n    } else {\n      return scaled;\n    }\n  }\n  addPlanets(starSystem) {\n    starSystem.forEach(planetData => {\n      let planet = new _planetaryObj__WEBPACK_IMPORTED_MODULE_0__[\"default\"](planetData, this);\n      this.planets.push(planet);\n    });\n  }\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.pos.x, this.pos.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = 5;\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Star);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/stellarObj.js\n");

/***/ }),

/***/ "./src/scripts/view.js":
/*!*****************************!*\
  !*** ./src/scripts/view.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _stellarObj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stellarObj */ \"./src/scripts/stellarObj.js\");\n//import stellar card, planetary card, and planet/star classes.\n//responsible for taking in stellar system data, creating star and planets, and animating. \n//consider not using an actual View, but export this thing as a collection of functions. \n//starting to think it doesn't really make sense to have it be a class with a instance methods.. \n//the background will likely not change from instance to instance.\n\n\nclass View {\n  constructor(starSystem, canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\");\n    this.starSystem = starSystem;\n    this.hostStar = new _stellarObj__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas, starSystem);\n    this.planets = this.hostStar.planets;\n  }\n  animate() {\n    this.draw(this.ctx);\n    this.hostStar.draw(this.ctx);\n    this.planets.forEach(planet => {\n      planet.move();\n      //todo add a conditional during elliptical orbit phase - if distance between planet and host star center is < host star radius, do not draw.\n      planet.draw(this.ctx);\n    });\n  }\n  draw(ctx) {\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy92aWV3LmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFK0I7QUFFL0IsTUFBTUMsSUFBSSxDQUFDO0VBRVBDLFdBQVdBLENBQUVDLFVBQVUsRUFBRUMsTUFBTSxFQUFHO0lBQzlCLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCLElBQUksQ0FBQ0MsR0FBRyxHQUFHRCxNQUFNLENBQUNFLFVBQVUsQ0FBQyxJQUFJLENBQUM7SUFDbEMsSUFBSSxDQUFDSCxVQUFVLEdBQUdBLFVBQVU7SUFDNUIsSUFBSSxDQUFDSSxRQUFRLEdBQUcsSUFBSVAsbURBQUksQ0FBQ0ksTUFBTSxFQUFFRCxVQUFVLENBQUM7SUFDNUMsSUFBSSxDQUFDSyxPQUFPLEdBQUcsSUFBSSxDQUFDRCxRQUFRLENBQUNDLE9BQU87RUFDeEM7RUFFQUMsT0FBT0EsQ0FBQSxFQUFJO0lBQ1AsSUFBSSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDTCxHQUFHLENBQUM7SUFDbkIsSUFBSSxDQUFDRSxRQUFRLENBQUNHLElBQUksQ0FBQyxJQUFJLENBQUNMLEdBQUcsQ0FBQztJQUM1QixJQUFJLENBQUNHLE9BQU8sQ0FBQ0csT0FBTyxDQUFJQyxNQUFNLElBQUs7TUFDL0JBLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLENBQUM7TUFDYjtNQUNBRCxNQUFNLENBQUNGLElBQUksQ0FBQyxJQUFJLENBQUNMLEdBQUcsQ0FBQztJQUN6QixDQUFDLENBQUM7RUFDTjtFQUVBSyxJQUFJQSxDQUFDTCxHQUFHLEVBQUM7SUFDTEEsR0FBRyxDQUFDUyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxJQUFJLENBQUNWLE1BQU0sQ0FBQ1csS0FBSyxFQUFFLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxNQUFNLENBQUM7SUFDekRYLEdBQUcsQ0FBQ1ksU0FBUyxHQUFHLE9BQU87SUFDdkJaLEdBQUcsQ0FBQ2EsUUFBUSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDZCxNQUFNLENBQUNXLEtBQUssRUFBRSxJQUFJLENBQUNYLE1BQU0sQ0FBQ1ksTUFBTSxDQUFDO0VBQzVEO0FBRUo7QUFFQSwrREFBZWYsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLWV4b3BsYW5ldC1leHBsb3Jlci8uL3NyYy9zY3JpcHRzL3ZpZXcuanM/ODBjMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL2ltcG9ydCBzdGVsbGFyIGNhcmQsIHBsYW5ldGFyeSBjYXJkLCBhbmQgcGxhbmV0L3N0YXIgY2xhc3Nlcy5cbi8vcmVzcG9uc2libGUgZm9yIHRha2luZyBpbiBzdGVsbGFyIHN5c3RlbSBkYXRhLCBjcmVhdGluZyBzdGFyIGFuZCBwbGFuZXRzLCBhbmQgYW5pbWF0aW5nLiBcbi8vY29uc2lkZXIgbm90IHVzaW5nIGFuIGFjdHVhbCBWaWV3LCBidXQgZXhwb3J0IHRoaXMgdGhpbmcgYXMgYSBjb2xsZWN0aW9uIG9mIGZ1bmN0aW9ucy4gXG4vL3N0YXJ0aW5nIHRvIHRoaW5rIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gaGF2ZSBpdCBiZSBhIGNsYXNzIHdpdGggYSBpbnN0YW5jZSBtZXRob2RzLi4gXG4vL3RoZSBiYWNrZ3JvdW5kIHdpbGwgbGlrZWx5IG5vdCBjaGFuZ2UgZnJvbSBpbnN0YW5jZSB0byBpbnN0YW5jZS5cblxuaW1wb3J0IFN0YXIgZnJvbSBcIi4vc3RlbGxhck9ialwiXG5cbmNsYXNzIFZpZXcge1xuXG4gICAgY29uc3RydWN0b3IoIHN0YXJTeXN0ZW0sIGNhbnZhcyApIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXNcbiAgICAgICAgdGhpcy5jdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpXG4gICAgICAgIHRoaXMuc3RhclN5c3RlbSA9IHN0YXJTeXN0ZW1cbiAgICAgICAgdGhpcy5ob3N0U3RhciA9IG5ldyBTdGFyKGNhbnZhcywgc3RhclN5c3RlbSlcbiAgICAgICAgdGhpcy5wbGFuZXRzID0gdGhpcy5ob3N0U3Rhci5wbGFuZXRzXG4gICAgfSBcblxuICAgIGFuaW1hdGUgKCkge1xuICAgICAgICB0aGlzLmRyYXcodGhpcy5jdHgpXG4gICAgICAgIHRoaXMuaG9zdFN0YXIuZHJhdyh0aGlzLmN0eClcbiAgICAgICAgdGhpcy5wbGFuZXRzLmZvckVhY2ggKCAocGxhbmV0KSA9PiB7XG4gICAgICAgICAgICBwbGFuZXQubW92ZSgpXG4gICAgICAgICAgICAvL3RvZG8gYWRkIGEgY29uZGl0aW9uYWwgZHVyaW5nIGVsbGlwdGljYWwgb3JiaXQgcGhhc2UgLSBpZiBkaXN0YW5jZSBiZXR3ZWVuIHBsYW5ldCBhbmQgaG9zdCBzdGFyIGNlbnRlciBpcyA8IGhvc3Qgc3RhciByYWRpdXMsIGRvIG5vdCBkcmF3LlxuICAgICAgICAgICAgcGxhbmV0LmRyYXcodGhpcy5jdHgpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZHJhdyhjdHgpe1xuICAgICAgICBjdHguY2xlYXJSZWN0KDAsMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodClcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIlxuICAgICAgICBjdHguZmlsbFJlY3QoMCwwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KVxuICAgIH1cbiAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBWaWV3OyJdLCJuYW1lcyI6WyJTdGFyIiwiVmlldyIsImNvbnN0cnVjdG9yIiwic3RhclN5c3RlbSIsImNhbnZhcyIsImN0eCIsImdldENvbnRleHQiLCJob3N0U3RhciIsInBsYW5ldHMiLCJhbmltYXRlIiwiZHJhdyIsImZvckVhY2giLCJwbGFuZXQiLCJtb3ZlIiwiY2xlYXJSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/view.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy1leG9wbGFuZXQtZXhwbG9yZXIvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ }),

/***/ "./node_modules/audiomotion-analyzer/src/audioMotion-analyzer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/audiomotion-analyzer/src/audioMotion-analyzer.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ AudioMotionAnalyzer; }\n/* harmony export */ });\n/**!\n * audioMotion-analyzer\n * High-resolution real-time graphic audio spectrum analyzer JS module\n *\n * @version 4.4.0\n * @author  Henrique Avila Vianna <hvianna@gmail.com> <https://henriquevianna.com>\n * @license AGPL-3.0-or-later\n */\n\nconst VERSION = '4.4.0';\n\n// internal constants\nconst PI      = Math.PI,\n\t  TAU     = 2 * PI,\n\t  HALF_PI = PI / 2,\n\t  C_1     = 8.17579892;  // frequency for C -1\n\nconst CANVAS_BACKGROUND_COLOR  = '#000',\n\t  CHANNEL_COMBINED         = 'dual-combined',\n\t  CHANNEL_HORIZONTAL       = 'dual-horizontal',\n\t  CHANNEL_SINGLE           = 'single',\n\t  CHANNEL_VERTICAL         = 'dual-vertical',\n\t  COLOR_BAR_INDEX          = 'bar-index',\n\t  COLOR_BAR_LEVEL          = 'bar-level',\n\t  COLOR_GRADIENT           = 'gradient',\n\t  DEBOUNCE_TIMEOUT         = 60,\n\t  EVENT_CLICK              = 'click',\n\t  EVENT_FULLSCREENCHANGE   = 'fullscreenchange',\n\t  EVENT_RESIZE             = 'resize',\n \t  GRADIENT_DEFAULT_BGCOLOR = '#111',\n \t  FILTER_NONE              = '',\n \t  FILTER_A                 = 'A',\n \t  FILTER_B                 = 'B',\n \t  FILTER_C                 = 'C',\n \t  FILTER_D                 = 'D',\n \t  FILTER_468               = '468',\n\t  FONT_FAMILY              = 'sans-serif',\n\t  FPS_COLOR                = '#0f0',\n\t  LEDS_UNLIT_COLOR         = '#7f7f7f22',\n\t  MODE_GRAPH               = 10,\n\t  REASON_CREATE            = 'create',\n\t  REASON_FSCHANGE          = 'fschange',\n\t  REASON_LORES             = 'lores',\n\t  REASON_RESIZE            = EVENT_RESIZE,\n\t  REASON_USER              = 'user',\n\t  SCALEX_BACKGROUND_COLOR  = '#000c',\n\t  SCALEX_LABEL_COLOR       = '#fff',\n\t  SCALEX_HIGHLIGHT_COLOR   = '#4f4',\n\t  SCALEY_LABEL_COLOR       = '#888',\n\t  SCALEY_MIDLINE_COLOR     = '#555',\n\t  SCALE_BARK               = 'bark',\n\t  SCALE_LINEAR             = 'linear',\n\t  SCALE_LOG                = 'log',\n\t  SCALE_MEL                = 'mel';\n\n// built-in gradients\nconst PRISM = [ '#a35', '#c66', '#e94', '#ed0', '#9d5', '#4d8', '#2cb', '#0bc', '#09c', '#36b' ],\n\t  GRADIENTS = [\n\t  [ 'classic', {\n\t\t\tcolorStops: [\n\t\t\t\t'red',\n\t\t\t\t{ color: 'yellow', level: .85, pos: .6 },\n\t\t\t\t{ color: 'lime', level: .475 }\n\t\t\t]\n\t  }],\n\t  [ 'prism', {\n\t\t\tcolorStops: PRISM\n\t  }],\n\t  [ 'rainbow', {\n\t\t\tdir: 'h',\n\t\t\tcolorStops: [ '#817', ...PRISM, '#639' ]\n\t  }],\n\t  [ 'orangered', {\n\t  \t\tbgColor: '#3e2f29',\n\t  \t\tcolorStops: [ 'OrangeRed' ]\n\t  }],\n\t  [ 'steelblue', {\n\t  \t\tbgColor: '#222c35',\n\t  \t\tcolorStops: [ 'SteelBlue' ]\n\t  }]\n];\n\n// settings defaults\nconst DEFAULT_SETTINGS = {\n\talphaBars      : false,\n\tansiBands      : false,\n\tbarSpace       : 0.1,\n\tbgAlpha        : 0.7,\n\tchannelLayout  : CHANNEL_SINGLE,\n\tcolorMode      : COLOR_GRADIENT,\n\tfftSize        : 8192,\n\tfillAlpha      : 1,\n\tfrequencyScale : SCALE_LOG,\n\tgradient       : GRADIENTS[0][0],\n\theight         : undefined,\n\tledBars        : false,\n\tlinearAmplitude: false,\n\tlinearBoost    : 1,\n\tlineWidth      : 0,\n\tloRes          : false,\n\tlumiBars       : false,\n\tmaxDecibels    : -25,\n\tmaxFPS         : 0,\n\tmaxFreq        : 22000,\n\tminDecibels    : -85,\n\tminFreq        : 20,\n\tmirror         : 0,\n\tmode           : 0,\n\tnoteLabels     : false,\n\toutlineBars    : false,\n\toverlay        : false,\n\tpeakLine       : false,\n\tradial\t\t   : false,\n\tradialInvert   : false,\n\tradius         : 0.3,\n\treflexAlpha    : 0.15,\n\treflexBright   : 1,\n\treflexFit      : true,\n\treflexRatio    : 0,\n\troundBars      : false,\n\tshowBgColor    : true,\n\tshowFPS        : false,\n\tshowPeaks      : true,\n\tshowScaleX     : true,\n\tshowScaleY     : false,\n\tsmoothing      : 0.5,\n\tspinSpeed      : 0,\n\tsplitGradient  : false,\n\tstart          : true,\n\ttrueLeds       : false,\n\tuseCanvas      : true,\n\tvolume         : 1,\n\tweightingFilter: FILTER_NONE,\n\twidth          : undefined\n};\n\n// custom error messages\nconst ERR_AUDIO_CONTEXT_FAIL     = [ 'ERR_AUDIO_CONTEXT_FAIL', 'Could not create audio context. Web Audio API not supported?' ],\n\t  ERR_INVALID_AUDIO_CONTEXT  = [ 'ERR_INVALID_AUDIO_CONTEXT', 'Provided audio context is not valid' ],\n\t  ERR_UNKNOWN_GRADIENT       = [ 'ERR_UNKNOWN_GRADIENT', 'Unknown gradient' ],\n\t  ERR_FREQUENCY_TOO_LOW      = [ 'ERR_FREQUENCY_TOO_LOW', 'Frequency values must be >= 1' ],\n\t  ERR_INVALID_MODE           = [ 'ERR_INVALID_MODE', 'Invalid mode' ],\n\t  ERR_REFLEX_OUT_OF_RANGE    = [ 'ERR_REFLEX_OUT_OF_RANGE', 'Reflex ratio must be >= 0 and < 1' ],\n\t  ERR_INVALID_AUDIO_SOURCE   = [ 'ERR_INVALID_AUDIO_SOURCE', 'Audio source must be an instance of HTMLMediaElement or AudioNode' ],\n\t  ERR_GRADIENT_INVALID_NAME  = [ 'ERR_GRADIENT_INVALID_NAME', 'Gradient name must be a non-empty string' ],\n\t  ERR_GRADIENT_NOT_AN_OBJECT = [ 'ERR_GRADIENT_NOT_AN_OBJECT', 'Gradient options must be an object' ],\n\t  ERR_GRADIENT_MISSING_COLOR = [ 'ERR_GRADIENT_MISSING_COLOR', 'Gradient colorStops must be a non-empty array' ];\n\nclass AudioMotionError extends Error {\n\tconstructor( error, value ) {\n\t\tconst [ code, message ] = error;\n\t\tsuper( message + ( value !== undefined ? `: ${value}` : '' ) );\n\t\tthis.name = 'AudioMotionError';\n\t\tthis.code = code;\n\t}\n}\n\n// helper function - output deprecation warning message on console\nconst deprecate = ( name, alternative ) => console.warn( `${name} is deprecated. Use ${alternative} instead.` );\n\n// helper function - check if a given object is empty (also returns `true` on null, undefined or any non-object value)\nconst isEmpty = obj => {\n\tfor ( const p in obj )\n\t\treturn false;\n\treturn true;\n}\n\n// helper function - validate a given value with an array of strings (by default, all lowercase)\n// returns the validated value, or the first element of `list` if `value` is not found in the array\nconst validateFromList = ( value, list, modifier = 'toLowerCase' ) => list[ Math.max( 0, list.indexOf( ( '' + value )[ modifier ]() ) ) ];\n\n// helper function - find the Y-coordinate of a point located between two other points, given its X-coordinate\nconst findY = ( x1, y1, x2, y2, x ) => y1 + ( y2 - y1 ) * ( x - x1 ) / ( x2 - x1 );\n\n// Polyfill for Array.findLastIndex()\nif ( ! Array.prototype.findLastIndex ) {\n\tArray.prototype.findLastIndex = function( callback ) {\n\t\tlet index = this.length;\n\t\twhile ( index-- > 0 ) {\n\t\t\tif ( callback( this[ index ] ) )\n\t\t\t\treturn index;\n\t\t}\n\t\treturn -1;\n\t}\n}\n\n// AudioMotionAnalyzer class\n\nclass AudioMotionAnalyzer {\n\n/**\n * CONSTRUCTOR\n *\n * @param {object} [container] DOM element where to insert the analyzer; if undefined, uses the document body\n * @param {object} [options]\n * @returns {object} AudioMotionAnalyzer object\n */\n\tconstructor( container, options = {} ) {\n\n\t\tthis._ready = false;\n\n\t\t// Initialize internal objects\n\t\tthis._aux = {};\t\t\t\t// auxiliary variables\n\t\tthis._canvasGradients = []; // CanvasGradient objects for channels 0 and 1\n\t\tthis._destroyed = false;\n\t\tthis._energy = { val: 0, peak: 0, hold: 0 };\n\t\tthis._flg = {};\t\t\t\t// flags\n\t\tthis._fps = 0;\n\t\tthis._gradients = {};       // registered gradients\n\t\tthis._last = 0;\t\t\t\t// timestamp of last rendered frame\n\t\tthis._outNodes = [];\t\t// output nodes\n\t\tthis._ownContext = false;\n\t\tthis._selectedGrads = [];   // names of the currently selected gradients for channels 0 and 1\n\t\tthis._sources = [];\t\t\t// input nodes\n\n\t\t// Check if options object passed as first argument\n\t\tif ( ! ( container instanceof Element ) ) {\n\t\t\tif ( isEmpty( options ) && ! isEmpty( container ) )\n\t\t\t\toptions = container;\n\t\t\tcontainer = null;\n\t\t}\n\n\t\tthis._ownCanvas = ! ( options.canvas instanceof HTMLCanvasElement );\n\n\t\t// Create a new canvas or use the one provided by the user\n\t\tconst canvas = this._ownCanvas ? document.createElement('canvas') : options.canvas;\n\t\tcanvas.style = 'max-width: 100%;';\n\t\tthis._ctx = canvas.getContext('2d');\n\n\t\t// Register built-in gradients\n\t\tfor ( const [ name, options ] of GRADIENTS )\n\t\t\tthis.registerGradient( name, options );\n\n\t\t// Set container\n\t\tthis._container = container || ( ! this._ownCanvas && canvas.parentElement ) || document.body;\n\n\t\t// Make sure we have minimal width and height dimensions in case of an inline container\n\t\tthis._defaultWidth  = this._container.clientWidth  || 640;\n\t\tthis._defaultHeight = this._container.clientHeight || 270;\n\n\t\t// Use audio context provided by user, or create a new one\n\n\t\tlet audioCtx;\n\n\t\tif ( options.source && ( audioCtx = options.source.context ) ) {\n\t\t\t// get audioContext from provided source audioNode\n\t\t}\n\t\telse if ( audioCtx = options.audioCtx ) {\n\t\t\t// use audioContext provided by user\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\taudioCtx = new ( window.AudioContext || window.webkitAudioContext )();\n\t\t\t\tthis._ownContext = true;\n\t\t\t}\n\t\t\tcatch( err ) {\n\t\t\t\tthrow new AudioMotionError( ERR_AUDIO_CONTEXT_FAIL );\n\t\t\t}\n\t\t}\n\n\t\t// make sure audioContext is valid\n\t\tif ( ! audioCtx.createGain )\n\t\t\tthrow new AudioMotionError( ERR_INVALID_AUDIO_CONTEXT );\n\n\t\t/*\n\t\t\tConnection routing:\n\t\t\t===================\n\n\t\t\tfor dual channel layouts:                +--->  analyzer[0]  ---+\n\t\t    \t                                     |                      |\n\t\t\t(source) --->  input  --->  splitter  ---+                      +--->  merger  --->  output  ---> (destination)\n\t\t    \t                                     |                      |\n\t\t        \t                                 +--->  analyzer[1]  ---+\n\n\t\t\tfor single channel layout:\n\n\t\t\t(source) --->  input  ----------------------->  analyzer[0]  --------------------->  output  ---> (destination)\n\n\t\t*/\n\n\t\t// create the analyzer nodes, channel splitter and merger, and gain nodes for input/output connections\n\t\tconst analyzer = this._analyzer = [ audioCtx.createAnalyser(), audioCtx.createAnalyser() ];\n\t\tconst splitter = this._splitter = audioCtx.createChannelSplitter(2);\n \t\tconst merger   = this._merger   = audioCtx.createChannelMerger(2);\n \t\tthis._input    = audioCtx.createGain();\n \t\tthis._output   = audioCtx.createGain();\n\n \t\t// connect audio source if provided in the options\n\t\tif ( options.source )\n\t\t\tthis.connectInput( options.source );\n\n \t\t// connect splitter -> analyzers\n \t\tfor ( const i of [0,1] )\n\t\t\tsplitter.connect( analyzer[ i ], i );\n\n\t\t// connect merger -> output\n\t\tmerger.connect( this._output );\n\n\t\t// connect output -> destination (speakers)\n\t\tif ( options.connectSpeakers !== false )\n\t\t\tthis.connectOutput();\n\n\t\t// create auxiliary canvases for the X-axis and radial scale labels\n\t\tfor ( const ctx of [ '_scaleX', '_scaleR' ] )\n\t\t\tthis[ ctx ] = document.createElement('canvas').getContext('2d');\n\n\t\t// set fullscreen element (defaults to canvas)\n\t\tthis._fsEl = options.fsElement || canvas;\n\n\t\t// Update canvas size on container / window resize and fullscreen events\n\n\t\t// Fullscreen changes are handled quite differently across browsers:\n\t\t// 1. Chromium browsers will trigger a `resize` event followed by a `fullscreenchange`\n\t\t// 2. Firefox triggers the `fullscreenchange` first and then the `resize`\n\t\t// 3. Chrome on Android (TV) won't trigger a `resize` event, only `fullscreenchange`\n\t\t// 4. Safari won't trigger `fullscreenchange` events at all, and on iPadOS the `resize`\n\t\t//    event is triggered **on the window** only (last tested on iPadOS 14)\n\n\t\t// helper function for resize events\n\t\tconst onResize = () => {\n\t\t\tif ( ! this._fsTimeout ) {\n\t\t\t\t// delay the resize to prioritize a possible following `fullscreenchange` event\n\t\t\t\tthis._fsTimeout = window.setTimeout( () => {\n\t\t\t\t\tif ( ! this._fsChanging ) {\n\t\t\t\t\t\tthis._setCanvas( REASON_RESIZE );\n\t\t\t\t\t\tthis._fsTimeout = 0;\n\t\t\t\t\t}\n\t\t\t\t}, DEBOUNCE_TIMEOUT );\n\t\t\t}\n\t\t}\n\n\t\t// if browser supports ResizeObserver, listen for resize on the container\n\t\tif ( window.ResizeObserver ) {\n\t\t\tthis._observer = new ResizeObserver( onResize );\n\t\t\tthis._observer.observe( this._container );\n\t\t}\n\n\t\t// create an AbortController to remove event listeners on destroy()\n\t\tthis._controller = new AbortController();\n\t\tconst signal = this._controller.signal;\n\n\t\t// listen for resize events on the window - required for fullscreen on iPadOS\n\t\twindow.addEventListener( EVENT_RESIZE, onResize, { signal } );\n\n\t\t// listen for fullscreenchange events on the canvas - not available on Safari\n\t\tcanvas.addEventListener( EVENT_FULLSCREENCHANGE, () => {\n\t\t\t// set flag to indicate a fullscreen change in progress\n\t\t\tthis._fsChanging = true;\n\n\t\t\t// if there is a scheduled resize event, clear it\n\t\t\tif ( this._fsTimeout )\n\t\t\t\twindow.clearTimeout( this._fsTimeout );\n\n\t\t\t// update the canvas\n\t\t\tthis._setCanvas( REASON_FSCHANGE );\n\n\t\t\t// delay clearing the flag to prevent any shortly following resize event\n\t\t\tthis._fsTimeout = window.setTimeout( () => {\n\t\t\t\tthis._fsChanging = false;\n\t\t\t\tthis._fsTimeout = 0;\n\t\t\t}, DEBOUNCE_TIMEOUT );\n\t\t}, { signal } );\n\n\t\t// Resume audio context if in suspended state (browsers' autoplay policy)\n\t\tconst unlockContext = () => {\n\t\t\tif ( audioCtx.state == 'suspended' )\n\t\t\t\taudioCtx.resume();\n\t\t\twindow.removeEventListener( EVENT_CLICK, unlockContext );\n\t\t}\n\t\twindow.addEventListener( EVENT_CLICK, unlockContext );\n\n\t\t// reset FPS-related variables when window becomes visible (avoid FPS drop due to frames not rendered while hidden)\n\t\tdocument.addEventListener( 'visibilitychange', () => {\n\t\t\tif ( document.visibilityState != 'hidden' ) {\n\t\t\t\tthis._frames = 0;\n\t\t\t\tthis._time = performance.now();\n\t\t\t}\n\t\t}, { signal } );\n\n\t\t// Set configuration options and use defaults for any missing properties\n\t\tthis._setProps( options, true );\n\n\t\t// Add canvas to the container (only when canvas not provided by user)\n\t\tif ( this.useCanvas && this._ownCanvas )\n\t\t\tthis._container.appendChild( canvas );\n\n\t\t// Finish canvas setup\n\t\tthis._ready = true;\n\t\tthis._setCanvas( REASON_CREATE );\n\t}\n\n\t/**\n\t * ==========================================================================\n\t *\n\t * PUBLIC PROPERTIES GETTERS AND SETTERS\n\t *\n\t * ==========================================================================\n\t */\n\n\tget alphaBars() {\n\t\treturn this._alphaBars;\n\t}\n\tset alphaBars( value ) {\n\t\tthis._alphaBars = !! value;\n\t\tthis._calcBars();\n\t}\n\n\tget ansiBands() {\n\t\treturn this._ansiBands;\n\t}\n\tset ansiBands( value ) {\n\t\tthis._ansiBands = !! value;\n\t\tthis._calcBars();\n\t}\n\n\tget barSpace() {\n\t\treturn this._barSpace;\n\t}\n\tset barSpace( value ) {\n\t\tthis._barSpace = +value || 0;\n\t\tthis._calcBars();\n\t}\n\n\tget channelLayout() {\n\t\treturn this._chLayout;\n\t}\n\tset channelLayout( value ) {\n\t\tthis._chLayout = validateFromList( value, [ CHANNEL_SINGLE, CHANNEL_HORIZONTAL, CHANNEL_VERTICAL, CHANNEL_COMBINED ] );\n\n\t\t// update node connections\n\t\tthis._input.disconnect();\n\t\tthis._input.connect( this._chLayout != CHANNEL_SINGLE ? this._splitter : this._analyzer[0] );\n\t\tthis._analyzer[0].disconnect();\n\t\tif ( this._outNodes.length ) // connect analyzer only if the output is connected to other nodes\n\t\t\tthis._analyzer[0].connect( this._chLayout != CHANNEL_SINGLE ? this._merger : this._output );\n\n\t\tthis._calcBars();\n\t\tthis._makeGrad();\n\t}\n\n\tget colorMode() {\n\t\treturn this._colorMode;\n\t}\n\tset colorMode( value ) {\n\t\tthis._colorMode = validateFromList( value, [ COLOR_GRADIENT, COLOR_BAR_INDEX, COLOR_BAR_LEVEL ] );\n\t}\n\n\tget fftSize() {\n\t\treturn this._analyzer[0].fftSize;\n\t}\n\tset fftSize( value ) {\n\t\tfor ( const i of [0,1] )\n\t\t\tthis._analyzer[ i ].fftSize = value;\n\t\tconst binCount = this._analyzer[0].frequencyBinCount;\n\t\tthis._fftData = [ new Float32Array( binCount ), new Float32Array( binCount ) ];\n\t\tthis._calcBars();\n\t}\n\n\tget frequencyScale() {\n\t\treturn this._frequencyScale;\n\t}\n\tset frequencyScale( value ) {\n\t\tthis._frequencyScale = validateFromList( value, [ SCALE_LOG, SCALE_BARK, SCALE_MEL, SCALE_LINEAR ] );\n\t\tthis._calcBars();\n\t}\n\n\tget gradient() {\n\t\treturn this._selectedGrads[0];\n\t}\n\tset gradient( value ) {\n\t\tthis._setGradient( value );\n\t}\n\n\tget gradientLeft() {\n\t\treturn this._selectedGrads[0];\n\t}\n\tset gradientLeft( value ) {\n\t\tthis._setGradient( value, 0 );\n\t}\n\n\tget gradientRight() {\n\t\treturn this._selectedGrads[1];\n\t}\n\tset gradientRight( value ) {\n\t\tthis._setGradient( value, 1 );\n\t}\n\n\tget height() {\n\t\treturn this._height;\n\t}\n\tset height( h ) {\n\t\tthis._height = h;\n\t\tthis._setCanvas( REASON_USER );\n\t}\n\n\tget ledBars() {\n\t\treturn this._showLeds;\n\t}\n\tset ledBars( value ) {\n\t\tthis._showLeds = !! value;\n\t\tthis._calcBars();\n\t}\n\n\tget linearAmplitude() {\n\t\treturn this._linearAmplitude;\n\t}\n\tset linearAmplitude( value ) {\n\t\tthis._linearAmplitude = !! value;\n\t}\n\n\tget linearBoost() {\n\t\treturn this._linearBoost;\n\t}\n\tset linearBoost( value ) {\n\t\tthis._linearBoost = value >= 1 ? +value : 1;\n\t}\n\n\tget lineWidth() {\n\t\treturn this._lineWidth;\n\t}\n\tset lineWidth( value ) {\n\t\tthis._lineWidth = +value || 0;\n\t}\n\n\tget loRes() {\n\t\treturn this._loRes;\n\t}\n\tset loRes( value ) {\n\t\tthis._loRes = !! value;\n\t\tthis._setCanvas( REASON_LORES );\n\t}\n\n\tget lumiBars() {\n\t\treturn this._lumiBars;\n\t}\n\tset lumiBars( value ) {\n\t\tthis._lumiBars = !! value;\n\t\tthis._calcBars();\n\t\tthis._makeGrad();\n\t}\n\n\tget maxDecibels() {\n\t\treturn this._analyzer[0].maxDecibels;\n\t}\n\tset maxDecibels( value ) {\n\t\tfor ( const i of [0,1] )\n\t\t\tthis._analyzer[ i ].maxDecibels = value;\n\t}\n\n\tget maxFPS() {\n\t\treturn this._maxFPS;\n\t}\n\tset maxFPS( value ) {\n\t\tthis._maxFPS = value < 0 ? 0 : +value || 0;\n\t}\n\n\tget maxFreq() {\n\t\treturn this._maxFreq;\n\t}\n\tset maxFreq( value ) {\n\t\tif ( value < 1 )\n\t\t\tthrow new AudioMotionError( ERR_FREQUENCY_TOO_LOW );\n\t\telse {\n\t\t\tthis._maxFreq = Math.min( value, this.audioCtx.sampleRate / 2 );\n\t\t\tthis._calcBars();\n\t\t}\n\t}\n\n\tget minDecibels() {\n\t\treturn this._analyzer[0].minDecibels;\n\t}\n\tset minDecibels( value ) {\n\t\tfor ( const i of [0,1] )\n\t\t\tthis._analyzer[ i ].minDecibels = value;\n\t}\n\n\tget minFreq() {\n\t\treturn this._minFreq;\n\t}\n\tset minFreq( value ) {\n\t\tif ( value < 1 )\n\t\t\tthrow new AudioMotionError( ERR_FREQUENCY_TOO_LOW );\n\t\telse {\n\t\t\tthis._minFreq = +value;\n\t\t\tthis._calcBars();\n\t\t}\n\t}\n\n\tget mirror() {\n\t\treturn this._mirror;\n\t}\n\tset mirror( value ) {\n\t\tthis._mirror = Math.sign( value ) | 0; // ensure only -1, 0 or 1\n\t\tthis._calcBars();\n\t\tthis._makeGrad();\n\t}\n\n\tget mode() {\n\t\treturn this._mode;\n\t}\n\tset mode( value ) {\n\t\tconst mode = value | 0;\n\t\tif ( mode >= 0 && mode <= 10 && mode != 9 ) {\n\t\t\tthis._mode = mode;\n\t\t\tthis._calcBars();\n\t\t\tthis._makeGrad();\n\t\t}\n\t\telse\n\t\t\tthrow new AudioMotionError( ERR_INVALID_MODE, value );\n\t}\n\n\tget noteLabels() {\n\t\treturn this._noteLabels;\n\t}\n\tset noteLabels( value ) {\n\t\tthis._noteLabels = !! value;\n\t\tthis._createScales();\n\t}\n\n\tget outlineBars() {\n\t\treturn this._outlineBars;\n\t}\n\tset outlineBars( value ) {\n\t\tthis._outlineBars = !! value;\n\t\tthis._calcBars();\n\t}\n\n\tget peakLine() {\n\t\treturn this._peakLine;\n\t}\n\tset peakLine( value ) {\n\t\tthis._peakLine = !! value;\n\t}\n\n\tget radial() {\n\t\treturn this._radial;\n\t}\n\tset radial( value ) {\n\t\tthis._radial = !! value;\n\t\tthis._calcBars();\n\t\tthis._makeGrad();\n\t}\n\n\tget radialInvert() {\n\t\treturn this._radialInvert;\n\t}\n\tset radialInvert( value ) {\n\t\tthis._radialInvert = !! value;\n\t\tthis._calcBars();\n\t\tthis._makeGrad();\n\t}\n\n\tget radius() {\n\t\treturn this._radius;\n\t}\n\tset radius( value ) {\n\t\tthis._radius = +value || 0;\n\t\tthis._calcBars();\n\t\tthis._makeGrad();\n\t}\n\n\tget reflexRatio() {\n\t\treturn this._reflexRatio;\n\t}\n\tset reflexRatio( value ) {\n\t\tvalue = +value || 0;\n\t\tif ( value < 0 || value >= 1 )\n\t\t\tthrow new AudioMotionError( ERR_REFLEX_OUT_OF_RANGE );\n\t\telse {\n\t\t\tthis._reflexRatio = value;\n\t\t\tthis._calcBars();\n\t\t\tthis._makeGrad();\n\t\t}\n\t}\n\n\tget roundBars() {\n\t\treturn this._roundBars;\n\t}\n\tset roundBars( value ) {\n\t\tthis._roundBars = !! value;\n\t\tthis._calcBars();\n\t}\n\n\tget smoothing() {\n\t\treturn this._analyzer[0].smoothingTimeConstant;\n\t}\n\tset smoothing( value ) {\n\t\tfor ( const i of [0,1] )\n\t\t\tthis._analyzer[ i ].smoothingTimeConstant = value;\n\t}\n\n\tget spinSpeed() {\n\t\treturn this._spinSpeed;\n\t}\n\tset spinSpeed( value ) {\n\t\tvalue = +value || 0;\n\t\tif ( this._spinSpeed === undefined || value == 0 )\n\t\t\tthis._spinAngle = -HALF_PI; // initialize or reset the rotation angle\n\t\tthis._spinSpeed = value;\n\t}\n\n\tget splitGradient() {\n\t\treturn this._splitGradient;\n\t}\n\tset splitGradient( value ) {\n\t\tthis._splitGradient = !! value;\n\t\tthis._makeGrad();\n\t}\n\n\tget stereo() {\n\t\tdeprecate( 'stereo', 'channelLayout' );\n\t\treturn this._chLayout != CHANNEL_SINGLE;\n\t}\n\tset stereo( value ) {\n\t\tdeprecate( 'stereo', 'channelLayout' );\n\t\tthis.channelLayout = value ? CHANNEL_VERTICAL : CHANNEL_SINGLE;\n\t}\n\n\tget trueLeds() {\n\t\treturn this._trueLeds;\n\t}\n\tset trueLeds( value ) {\n\t\tthis._trueLeds = !! value;\n\t}\n\n\tget volume() {\n\t\treturn this._output.gain.value;\n\t}\n\tset volume( value ) {\n\t\tthis._output.gain.value = value;\n\t}\n\n\tget weightingFilter() {\n\t\treturn this._weightingFilter;\n\t}\n\tset weightingFilter( value ) {\n\t\tthis._weightingFilter = validateFromList( value, [ FILTER_NONE, FILTER_A, FILTER_B, FILTER_C, FILTER_D, FILTER_468 ], 'toUpperCase' );\n\t}\n\n\tget width() {\n\t\treturn this._width;\n\t}\n\tset width( w ) {\n\t\tthis._width = w;\n\t\tthis._setCanvas( REASON_USER );\n\t}\n\n\t// Read only properties\n\n\tget audioCtx() {\n\t\treturn this._input.context;\n\t}\n\tget canvas() {\n\t\treturn this._ctx.canvas;\n\t}\n\tget canvasCtx() {\n\t\treturn this._ctx;\n\t}\n\tget connectedSources() {\n\t\treturn this._sources;\n\t}\n\tget connectedTo() {\n\t\treturn this._outNodes;\n\t}\n\tget fps() {\n\t\treturn this._fps;\n\t}\n\tget fsHeight() {\n\t\treturn this._fsHeight;\n\t}\n\tget fsWidth() {\n\t\treturn this._fsWidth;\n\t}\n\tget isAlphaBars() {\n\t\treturn this._flg.isAlpha;\n\t}\n\tget isBandsMode() {\n\t\treturn this._flg.isBands;\n\t}\n\tget isDestroyed() {\n\t\treturn this._destroyed;\n\t}\n\tget isFullscreen() {\n\t\treturn this._fsEl && ( document.fullscreenElement || document.webkitFullscreenElement ) === this._fsEl;\n\t}\n\tget isLedBars() {\n\t\treturn this._flg.isLeds;\n\t}\n\tget isLumiBars() {\n\t\treturn this._flg.isLumi;\n\t}\n\tget isOctaveBands() {\n\t\treturn this._flg.isOctaves;\n\t}\n\tget isOn() {\n\t\treturn !! this._runId;\n\t}\n\tget isOutlineBars() {\n\t\treturn this._flg.isOutline;\n\t}\n\tget pixelRatio() {\n\t\treturn this._pixelRatio;\n\t}\n\tget isRoundBars() {\n\t\treturn this._flg.isRound;\n\t}\n\tstatic get version() {\n\t\treturn VERSION;\n\t}\n\n\t/**\n\t * ==========================================================================\n     *\n\t * PUBLIC METHODS\n\t *\n\t * ==========================================================================\n\t */\n\n\t/**\n\t * Connects an HTML media element or audio node to the analyzer\n\t *\n\t * @param {object} an instance of HTMLMediaElement or AudioNode\n\t * @returns {object} a MediaElementAudioSourceNode object if created from HTML element, or the same input object otherwise\n\t */\n\tconnectInput( source ) {\n\t\tconst isHTML = source instanceof HTMLMediaElement;\n\n\t\tif ( ! ( isHTML || source.connect ) )\n\t\t\tthrow new AudioMotionError( ERR_INVALID_AUDIO_SOURCE );\n\n\t\t// if source is an HTML element, create an audio node for it; otherwise, use the provided audio node\n\t\tconst node = isHTML ? this.audioCtx.createMediaElementSource( source ) : source;\n\n\t\tif ( ! this._sources.includes( node ) ) {\n\t\t\tnode.connect( this._input );\n\t\t\tthis._sources.push( node );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Connects the analyzer output to another audio node\n\t *\n\t * @param [{object}] an AudioNode; if undefined, the output is connected to the audio context destination (speakers)\n\t */\n\tconnectOutput( node = this.audioCtx.destination ) {\n\t\tif ( this._outNodes.includes( node ) )\n\t\t\treturn;\n\n\t\tthis._output.connect( node );\n\t\tthis._outNodes.push( node );\n\n\t\t// when connecting the first node, also connect the analyzer nodes to the merger / output nodes\n\t\tif ( this._outNodes.length == 1 ) {\n\t\t\tfor ( const i of [0,1] )\n\t\t\t\tthis._analyzer[ i ].connect( ( this._chLayout == CHANNEL_SINGLE && ! i ? this._output : this._merger ), 0, i );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys instance\n\t */\n\tdestroy() {\n\t\tif ( ! this._ready )\n\t\t\treturn;\n\n\t\tconst { audioCtx, canvas, _controller, _input, _merger, _observer, _ownCanvas, _ownContext, _splitter } = this;\n\n\t\tthis._destroyed = true;\n\t\tthis._ready = false;\n\t\tthis.stop();\n\n\t\t// remove event listeners\n\t\t_controller.abort();\n\t\tif ( _observer )\n\t\t\t_observer.disconnect();\n\n\t\t// clear callbacks and fullscreen element\n\t\tthis.onCanvasResize = null;\n\t\tthis.onCanvasDraw = null;\n\t\tthis._fsEl = null;\n\n\t\t// disconnect audio nodes\n\t\tthis.disconnectInput();\n\t\tthis.disconnectOutput(); // also disconnects analyzer nodes\n\t\t_input.disconnect();\n\t\t_splitter.disconnect();\n\t\t_merger.disconnect();\n\n\t\t// if audio context is our own (not provided by the user), close it\n\t\tif ( _ownContext )\n\t\t\taudioCtx.close();\n\n\t\t// remove canvas from the DOM (if not provided by the user)\n\t\tif ( _ownCanvas )\n\t\t\tcanvas.remove();\n\n\t\t// reset flags\n\t\tthis._calcBars();\n\t}\n\n\t/**\n\t * Disconnects audio sources from the analyzer\n\t *\n\t * @param [{object|array}] a connected AudioNode object or an array of such objects; if falsy, all connected nodes are disconnected\n\t * @param [{boolean}] if true, stops/releases audio tracks from disconnected media streams (e.g. microphone)\n\t */\n\tdisconnectInput( sources, stopTracks ) {\n\t\tif ( ! sources )\n\t\t\tsources = Array.from( this._sources );\n\t\telse if ( ! Array.isArray( sources ) )\n\t\t\tsources = [ sources ];\n\n\t\tfor ( const node of sources ) {\n\t\t\tconst idx = this._sources.indexOf( node );\n\t\t\tif ( stopTracks && node.mediaStream ) {\n\t\t\t\tfor ( const track of node.mediaStream.getAudioTracks() ) {\n\t\t\t\t\ttrack.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( idx >= 0 ) {\n\t\t\t\tnode.disconnect( this._input );\n\t\t\t\tthis._sources.splice( idx, 1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Disconnects the analyzer output from other audio nodes\n\t *\n\t * @param [{object}] a connected AudioNode object; if undefined, all connected nodes are disconnected\n\t */\n\tdisconnectOutput( node ) {\n\t\tif ( node && ! this._outNodes.includes( node ) )\n\t\t\treturn;\n\n\t\tthis._output.disconnect( node );\n\t\tthis._outNodes = node ? this._outNodes.filter( e => e !== node ) : [];\n\n\t\t// if disconnected from all nodes, also disconnect the analyzer nodes so they keep working on Chromium\n\t\t// see https://github.com/hvianna/audioMotion-analyzer/issues/13#issuecomment-808764848\n\t\tif ( this._outNodes.length == 0 ) {\n\t\t\tfor ( const i of [0,1] )\n\t\t\t\tthis._analyzer[ i ].disconnect();\n\t\t}\n\t}\n\n\t/**\n\t * Returns analyzer bars data\n     *\n\t * @returns {array}\n\t */\n\tgetBars() {\n\t\treturn Array.from( this._bars, ( { posX, freq, freqLo, freqHi, hold, peak, value } ) => ( { posX, freq, freqLo, freqHi, hold, peak, value } ) );\n\t}\n\n\t/**\n\t * Returns the energy of a frequency, or average energy of a range of frequencies\n\t *\n\t * @param [{number|string}] single or initial frequency (Hz), or preset name; if undefined, returns the overall energy\n\t * @param [{number}] ending frequency (Hz)\n\t * @returns {number|null} energy value (0 to 1) or null, if the specified preset is unknown\n\t */\n\tgetEnergy( startFreq, endFreq ) {\n\t\tif ( startFreq === undefined )\n\t\t\treturn this._energy.val;\n\n\t\t// if startFreq is a string, check for presets\n\t\tif ( startFreq != +startFreq ) {\n\t\t\tif ( startFreq == 'peak' )\n\t\t\t\treturn this._energy.peak;\n\n\t\t\tconst presets = {\n\t\t\t\tbass:    [ 20, 250 ],\n\t\t\t\tlowMid:  [ 250, 500 ],\n\t\t\t\tmid:     [ 500, 2e3 ],\n\t\t\t\thighMid: [ 2e3, 4e3 ],\n\t\t\t\ttreble:  [ 4e3, 16e3 ]\n\t\t\t}\n\n\t\t\tif ( ! presets[ startFreq ] )\n\t\t\t\treturn null;\n\n\t\t\t[ startFreq, endFreq ] = presets[ startFreq ];\n\t\t}\n\n\t\tconst startBin = this._freqToBin( startFreq ),\n\t\t      endBin   = endFreq ? this._freqToBin( endFreq ) : startBin,\n\t\t      chnCount = this._chLayout == CHANNEL_SINGLE ? 1 : 2;\n\n\t\tlet energy = 0;\n\t\tfor ( let channel = 0; channel < chnCount; channel++ ) {\n\t\t\tfor ( let i = startBin; i <= endBin; i++ )\n\t\t\t\tenergy += this._normalizedB( this._fftData[ channel ][ i ] );\n\t\t}\n\n\t\treturn energy / ( endBin - startBin + 1 ) / chnCount;\n\t}\n\n\t/**\n\t * Returns current analyzer settings in object format\n\t *\n\t * @param [{string|array}] a property name or an array of property names to not include in the returned object\n\t * @returns {object} Options object\n\t */\n\tgetOptions( ignore ) {\n\t\tif ( ! Array.isArray( ignore ) )\n\t\t\tignore = [ ignore ];\n\t\tlet options = {};\n\t\tfor ( const prop of Object.keys( DEFAULT_SETTINGS ) ) {\n\t\t\tif ( ! ignore.includes( prop ) ) {\n\t\t\t\tif ( prop == 'gradient' && this.gradientLeft != this.gradientRight ) {\n\t\t\t\t\toptions.gradientLeft = this.gradientLeft;\n\t\t\t\t\toptions.gradientRight = this.gradientRight;\n\t\t\t\t}\n\t\t\t\telse if ( prop != 'start' )\n\t\t\t\t\toptions[ prop ] = this[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn options;\n\t}\n\n\t/**\n\t * Registers a custom gradient\n\t *\n\t * @param {string} name\n\t * @param {object} options\n\t */\n\tregisterGradient( name, options ) {\n\t\tif ( typeof name != 'string' || name.trim().length == 0 )\n\t\t\tthrow new AudioMotionError( ERR_GRADIENT_INVALID_NAME );\n\n\t\tif ( typeof options != 'object' )\n\t\t\tthrow new AudioMotionError( ERR_GRADIENT_NOT_AN_OBJECT );\n\n\t\tconst { colorStops } = options;\n\n\t\tif ( ! Array.isArray( colorStops ) || ! colorStops.length )\n\t\t\tthrow new AudioMotionError( ERR_GRADIENT_MISSING_COLOR );\n\n\t\tconst count     = colorStops.length,\n\t\t\t  isInvalid = val => +val != val || val < 0 || val > 1;\n\n\t\t// normalize all colorStops as objects with `pos`, `color` and `level` properties\n\t\tcolorStops.forEach( ( colorStop, index ) => {\n\t\t\tconst pos = index / Math.max( 1, count - 1 );\n\t\t\tif ( typeof colorStop != 'object' ) // only color string was defined\n\t\t\t\tcolorStops[ index ] = {\tpos, color: colorStop };\n\t\t\telse if ( isInvalid( colorStop.pos ) )\n\t\t\t\tcolorStop.pos = pos;\n\n\t\t\tif ( isInvalid( colorStop.level ) )\n\t\t\t\tcolorStops[ index ].level = 1 - index / count;\n\t\t});\n\n\t\t// make sure colorStops is in descending `level` order and that the first one has `level == 1`\n\t\t// this is crucial for proper operation of 'bar-level' colorMode!\n\t\tcolorStops.sort( ( a, b ) => a.level < b.level ? 1 : a.level > b.level ? -1 : 0 );\n\t\tcolorStops[0].level = 1;\n\n\t\tthis._gradients[ name ] = {\n\t\t\tbgColor:    options.bgColor || GRADIENT_DEFAULT_BGCOLOR,\n\t\t\tdir:        options.dir,\n\t\t\tcolorStops: colorStops\n\t\t};\n\n\t\t// if the registered gradient is one of the currently selected gradients, regenerate them\n\t\tif ( this._selectedGrads.includes( name ) )\n\t\t\tthis._makeGrad();\n\t}\n\n\t/**\n\t * Set dimensions of analyzer's canvas\n\t *\n\t * @param {number} w width in pixels\n\t * @param {number} h height in pixels\n\t */\n\tsetCanvasSize( w, h ) {\n\t\tthis._width = w;\n\t\tthis._height = h;\n\t\tthis._setCanvas( REASON_USER );\n\t}\n\n\t/**\n\t * Set desired frequency range\n\t *\n\t * @param {number} min lowest frequency represented in the x-axis\n\t * @param {number} max highest frequency represented in the x-axis\n\t */\n\tsetFreqRange( min, max ) {\n\t\tif ( min < 1 || max < 1 )\n\t\t\tthrow new AudioMotionError( ERR_FREQUENCY_TOO_LOW );\n\t\telse {\n\t\t\tthis._minFreq = Math.min( min, max );\n\t\t\tthis.maxFreq  = Math.max( min, max ); // use the setter for maxFreq\n\t\t}\n\t}\n\n\t/**\n\t * Set custom parameters for LED effect\n\t * If called with no arguments or if any property is invalid, clears any previous custom parameters\n\t *\n\t * @param {object} [params]\n\t */\n\tsetLedParams( params ) {\n\t\tlet maxLeds, spaceV, spaceH;\n\n\t\t// coerce parameters to Number; `NaN` results are rejected in the condition below\n\t\tif ( params ) {\n\t\t\tmaxLeds = params.maxLeds | 0, // ensure integer\n\t\t\tspaceV  = +params.spaceV,\n\t\t\tspaceH  = +params.spaceH;\n\t\t}\n\n\t\tthis._ledParams = maxLeds > 0 && spaceV > 0 && spaceH >= 0 ? [ maxLeds, spaceV, spaceH ] : undefined;\n\t\tthis._calcBars();\n\t}\n\n\t/**\n\t * Shorthand function for setting several options at once\n\t *\n\t * @param {object} options\n\t */\n\tsetOptions( options ) {\n\t\tthis._setProps( options );\n\t}\n\n\t/**\n\t * Adjust the analyzer's sensitivity\n\t *\n\t * @param {number} min minimum decibels value\n\t * @param {number} max maximum decibels value\n\t */\n\tsetSensitivity( min, max ) {\n\t\tfor ( const i of [0,1] ) {\n\t\t\tthis._analyzer[ i ].minDecibels = Math.min( min, max );\n\t\t\tthis._analyzer[ i ].maxDecibels = Math.max( min, max );\n\t\t}\n\t}\n\n\t/**\n\t * Start the analyzer\n\t */\n\tstart() {\n\t\tthis.toggleAnalyzer( true );\n\t}\n\n\t/**\n\t * Stop the analyzer\n\t */\n\tstop() {\n\t\tthis.toggleAnalyzer( false );\n\t}\n\n\t/**\n\t * Start / stop canvas animation\n\t *\n\t * @param {boolean} [force] if undefined, inverts the current state\n\t * @returns {boolean} resulting state after the change\n\t */\n\ttoggleAnalyzer( force ) {\n\t\tconst hasStarted = this.isOn;\n\n\t\tif ( force === undefined )\n\t\t\tforce = ! hasStarted;\n\n\t\t// Stop the analyzer if it was already running and must be disabled\n\t\tif ( hasStarted && ! force ) {\n\t\t\tcancelAnimationFrame( this._runId );\n\t\t\tthis._runId = 0;\n\t\t}\n\t\t// Start the analyzer if it was stopped and must be enabled\n\t\telse if ( ! hasStarted && force && ! this._destroyed ) {\n\t\t\tthis._frames = 0;\n\t\t\tthis._time = performance.now();\n\t\t\tthis._runId = requestAnimationFrame( timestamp => this._draw( timestamp ) ); // arrow function preserves the scope of *this*\n\t\t}\n\n\t\treturn this.isOn;\n\t}\n\n\t/**\n\t * Toggles canvas full-screen mode\n\t */\n\ttoggleFullscreen() {\n\t\tif ( this.isFullscreen ) {\n\t\t\tif ( document.exitFullscreen )\n\t\t\t\tdocument.exitFullscreen();\n\t\t\telse if ( document.webkitExitFullscreen )\n\t\t\t\tdocument.webkitExitFullscreen();\n\t\t}\n\t\telse {\n\t\t\tconst fsEl = this._fsEl;\n\t\t\tif ( ! fsEl )\n\t\t\t\treturn;\n\t\t\tif ( fsEl.requestFullscreen )\n\t\t\t\tfsEl.requestFullscreen();\n\t\t\telse if ( fsEl.webkitRequestFullscreen )\n\t\t\t\tfsEl.webkitRequestFullscreen();\n\t\t}\n\t}\n\n\t/**\n\t * ==========================================================================\n\t *\n\t * PRIVATE METHODS\n\t *\n\t * ==========================================================================\n\t */\n\n\t/**\n\t * Return the frequency (in Hz) for a given FFT bin\n\t */\n\t_binToFreq( bin ) {\n\t\treturn bin * this.audioCtx.sampleRate / this.fftSize || 1; // returns 1 for bin 0\n\t}\n\n\t/**\n\t * Compute all internal data required for the analyzer, based on its current settings\n\t */\n\t_calcBars() {\n\t\tconst bars = this._bars = []; // initialize object property\n\n\t\tif ( ! this._ready ) {\n\t\t\tthis._flg = { isAlpha: false, isBands: false, isLeds: false, isLumi: false, isOctaves: false, isOutline: false, isRound: false, noLedGap: false };\n\t\t\treturn;\n\t\t}\n\n\t\tconst { _ansiBands, _barSpace, canvas, _chLayout, _maxFreq, _minFreq, _mirror, _mode, _radial, _radialInvert, _reflexRatio } = this,\n\t\t\t  centerX          = canvas.width >> 1,\n\t\t\t  centerY          = canvas.height >> 1,\n\t\t\t  isDualVertical   = _chLayout == CHANNEL_VERTICAL && ! _radial,\n\t\t\t  isDualHorizontal = _chLayout == CHANNEL_HORIZONTAL,\n\n\t\t\t  // COMPUTE FLAGS\n\n\t\t\t  isBands   = _mode % 10 != 0, // true for modes 1 to 9\n\t\t\t  isOctaves = isBands && this._frequencyScale == SCALE_LOG,\n\t\t\t  isLeds    = this._showLeds && isBands && ! _radial,\n\t\t\t  isLumi    = this._lumiBars && isBands && ! _radial,\n\t\t\t  isAlpha   = this._alphaBars && ! isLumi && _mode != MODE_GRAPH,\n\t\t\t  isOutline = this._outlineBars && isBands && ! isLumi && ! isLeds,\n\t\t\t  isRound   = this._roundBars && isBands && ! isLumi && ! isLeds,\n\t\t\t  noLedGap  = _chLayout != CHANNEL_VERTICAL || _reflexRatio > 0 && ! isLumi,\n\n\t\t\t  // COMPUTE AUXILIARY VALUES\n\n\t\t\t  // channelHeight is the total canvas height dedicated to each channel, including the reflex area, if any)\n\t\t\t  channelHeight  = canvas.height - ( isDualVertical && ! isLeds ? .5 : 0 ) >> isDualVertical,\n\t\t\t  // analyzerHeight is the effective height used to render the analyzer, excluding the reflex area\n\t\t\t  analyzerHeight = channelHeight * ( isLumi || _radial ? 1 : 1 - _reflexRatio ) | 0,\n\n\t\t\t  analyzerWidth  = canvas.width - centerX * ( isDualHorizontal || _mirror != 0 ),\n\n\t\t\t  // channelGap is **0** if isLedDisplay == true (LEDs already have spacing); **1** if canvas height is odd (windowed); **2** if it's even\n\t\t\t  // TODO: improve this, make it configurable?\n\t\t\t  channelGap     = isDualVertical ? canvas.height - channelHeight * 2 : 0,\n\n\t\t\t  initialX       = centerX * ( _mirror == -1 && ! isDualHorizontal && ! _radial );\n\n\t\tlet innerRadius = Math.min( canvas.width, canvas.height ) * .375 * ( _chLayout == CHANNEL_VERTICAL ? 1 : this._radius ) | 0,\n\t\t\touterRadius = Math.min( centerX, centerY );\n\n\t\tif ( _radialInvert && _chLayout != CHANNEL_VERTICAL )\n\t\t\t[ innerRadius, outerRadius ] = [ outerRadius, innerRadius ];\n\n\t\t/**\n\t\t *\tCREATE ANALYZER BANDS\n\t\t *\n\t\t *\tUSES:\n\t\t *\t\tanalyzerWidth\n\t\t *\t\tinitialX\n\t\t *\t\tisBands\n\t\t *\t\tisOctaves\n\t\t *\n\t\t *\tGENERATES:\n\t\t *\t\tbars (populates this._bars)\n\t\t *\t\tbardWidth\n\t\t *\t\tscaleMin\n\t\t *\t\tunitWidth\n\t\t */\n\n\t\t// helper function\n\t\t// bar object: { posX, freq, freqLo, freqHi, binLo, binHi, ratioLo, ratioHi, peak, hold, value }\n\t\tconst barsPush = args => bars.push( { ...args, peak: [0,0], hold: [0], value: [0] } );\n\n\t\t/*\n\t\t\tA simple interpolation is used to obtain an approximate amplitude value for any given frequency,\n\t\t\tfrom the available FFT data. We find the FFT bin which closer matches the desired frequency\tand\n\t\t\tinterpolate its value with that of the next adjacent bin, like so:\n\n\t\t\t\tv = v0 + ( v1 - v0 ) * ( log2( f / f0 ) / log2( f1 / f0 ) )\n\t\t\t\t                       \\__________________________________/\n\t\t\t\t                                        |\n\t\t\t\t                                      ratio\n\t\t\t\twhere:\n\n\t\t\t\tf  - desired frequency\n\t\t\t\tv  - amplitude (volume) of desired frequency\n\t\t\t\tf0 - frequency represented by the lower FFT bin\n\t\t\t\tf1 - frequency represented by the upper FFT bin\n\t\t\t\tv0 - amplitude of f0\n\t\t\t\tv1 - amplitude of f1\n\n\t\t\tratio is calculated in advance here, to reduce computational complexity during real-time rendering.\n\t\t*/\n\n\t\t// helper function to calculate FFT bin and interpolation ratio for a given frequency\n\t\tconst calcRatio = freq => {\n\t\t\tconst bin   = this._freqToBin( freq, 'floor' ), // find closest FFT bin\n\t\t\t\t  lower = this._binToFreq( bin ),\n\t\t\t\t  upper = this._binToFreq( bin + 1 ),\n\t\t\t\t  ratio = Math.log2( freq / lower ) / Math.log2( upper / lower );\n\n\t\t\treturn [ bin, ratio ];\n\t\t}\n\n\t\tlet barWidth, scaleMin, unitWidth;\n\n\t\tif ( isOctaves ) {\n\t\t\t// helper function to round a value to a given number of significant digits\n\t\t\t// `atLeast` set to true prevents reducing the number of integer significant digits\n\t\t\tconst roundSD = ( value, digits, atLeast ) => +value.toPrecision( atLeast ? Math.max( digits, 1 + Math.log10( value ) | 0 ) : digits );\n\n\t\t\t// helper function to find the nearest preferred number (Renard series) for a given value\n\t\t\tconst nearestPreferred = value => {\n\t\t\t\t// R20 series is used here, as it provides closer approximations for 1/2 octave bands (non-standard)\n\t\t\t\tconst preferred = [ 1, 1.12, 1.25, 1.4, 1.6, 1.8, 2, 2.24, 2.5, 2.8, 3.15, 3.55, 4, 4.5, 5, 5.6, 6.3, 7.1, 8, 9, 10 ],\n\t\t\t\t\t  power = Math.log10( value ) | 0,\n\t\t\t\t\t  normalized = value / 10 ** power;\n\n\t\t\t\tlet i = 1;\n\t\t\t\twhile ( i < preferred.length && normalized > preferred[ i ] )\n\t\t\t\t\ti++;\n\n\t\t\t\tif ( normalized - preferred[ i - 1 ] < preferred[ i ] - normalized )\n\t\t\t\t\ti--;\n\n\t\t\t\treturn ( preferred[ i ] * 10 ** ( power + 5 ) | 0 ) / 1e5; // keep 5 significant digits\n\t\t\t}\n\n\t\t\t// ANSI standard octave bands use the base-10 frequency ratio, as preferred by [ANSI S1.11-2004, p.2]\n\t\t\t// The equal-tempered scale uses the base-2 ratio\n\t\t\tconst bands = [0,24,12,8,6,4,3,2,1][ _mode ],\n\t\t\t\t  bandWidth = _ansiBands ? 10 ** ( 3 / ( bands * 10 ) ) : 2 ** ( 1 / bands ), // 10^(3/10N) or 2^(1/N)\n\t\t\t\t  halfBand  = bandWidth ** .5;\n\n\t\t\tlet analyzerBars = [],\n\t\t\t\tcurrFreq = _ansiBands ? 7.94328235 / ( bands % 2 ? 1 : halfBand ) : C_1;\n\t\t\t\t// For ANSI bands with even denominators (all except 1/1 and 1/3), the reference frequency (1 kHz)\n\t\t\t\t// must fall on the edges of a pair of adjacent bands, instead of midband [ANSI S1.11-2004, p.2]\n\t\t\t\t// In the equal-tempered scale, all midband frequencies represent a musical note or quarter-tone.\n\n\t\t\tdo {\n\t\t\t\tlet freq = currFreq; // midband frequency\n\n\t\t\t\tconst freqLo = roundSD( freq / halfBand, 4, true ), // lower edge frequency\n\t\t\t\t\t  freqHi = roundSD( freq * halfBand, 4, true ), // upper edge frequency\n\t\t\t\t\t  [ binLo, ratioLo ] = calcRatio( freqLo ),\n\t\t\t\t\t  [ binHi, ratioHi ] = calcRatio( freqHi );\n\n\t\t\t\t// for 1/1, 1/2 and 1/3 ANSI bands, use the preferred numbers to find the nominal midband frequency\n\t\t\t\t// for 1/4 to 1/24, round to 2 or 3 significant digits, according to the MSD [ANSI S1.11-2004, p.12]\n\t\t\t\tif ( _ansiBands )\n\t\t\t\t\tfreq = bands < 4 ? nearestPreferred( freq ) : roundSD( freq, freq.toString()[0] < 5 ? 3 : 2 );\n\t\t\t\telse\n\t\t\t\t\tfreq = roundSD( freq, 4, true );\n\n\t\t\t\tif ( freq >= _minFreq )\n\t\t\t\t\tbarsPush( { posX: 0, freq, freqLo, freqHi, binLo, binHi, ratioLo, ratioHi } );\n\n\t\t\t\tcurrFreq *= bandWidth;\n\t\t\t} while ( currFreq <= _maxFreq );\n\n\t\t\tbarWidth = analyzerWidth / bars.length;\n\n\t\t\tbars.forEach( ( bar, index ) => bar.posX = initialX + index * barWidth );\n\n\t\t\tconst firstBar = bars[0],\n\t\t\t\t  lastBar  = bars[ bars.length - 1 ];\n\n\t\t\tscaleMin = this._freqScaling( firstBar.freqLo );\n\t\t\tunitWidth = analyzerWidth / ( this._freqScaling( lastBar.freqHi ) - scaleMin );\n\n\t\t\t// clamp edge frequencies to minFreq / maxFreq, if necessary\n\t\t\t// this is done after computing scaleMin and unitWidth, for the proper positioning of labels on the X-axis\n\t\t\tif ( firstBar.freqLo < _minFreq ) {\n\t\t\t\tfirstBar.freqLo = _minFreq;\n\t\t\t\t[ firstBar.binLo, firstBar.ratioLo ] = calcRatio( _minFreq );\n\t\t\t}\n\n\t\t\tif ( lastBar.freqHi > _maxFreq ) {\n\t\t\t\tlastBar.freqHi = _maxFreq;\n\t\t\t\t[ lastBar.binHi, lastBar.ratioHi ] = calcRatio( _maxFreq );\n\t\t\t}\n\t\t}\n\t\telse if ( isBands ) { // a bands mode is selected, but frequency scale is not logarithmic\n\n\t\t\tconst bands = [0,24,12,8,6,4,3,2,1][ _mode ] * 10;\n\n\t\t\tconst invFreqScaling = x => {\n\t\t\t\tswitch ( this._frequencyScale ) {\n\t\t\t\t\tcase SCALE_BARK :\n\t\t\t\t\t\treturn 1960 / ( 26.81 / ( x + .53 ) - 1 );\n\t\t\t\t\tcase SCALE_MEL :\n\t\t\t\t\t\treturn 700 * ( 2 ** x - 1 );\n\t\t\t\t\tcase SCALE_LINEAR :\n\t\t\t\t\t\treturn x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbarWidth = analyzerWidth / bands;\n\n\t\t\tscaleMin = this._freqScaling( _minFreq );\n\t\t\tunitWidth = analyzerWidth / ( this._freqScaling( _maxFreq ) - scaleMin );\n\n\t\t\tfor ( let i = 0, posX = 0; i < bands; i++, posX += barWidth ) {\n\t\t\t\tconst freqLo = invFreqScaling( scaleMin + posX / unitWidth ),\n\t\t\t\t\t  freq   = invFreqScaling( scaleMin + ( posX + barWidth / 2 ) / unitWidth ),\n\t\t\t\t\t  freqHi = invFreqScaling( scaleMin + ( posX + barWidth ) / unitWidth ),\n\t\t\t\t\t  [ binLo, ratioLo ] = calcRatio( freqLo ),\n\t\t\t\t\t  [ binHi, ratioHi ] = calcRatio( freqHi );\n\n\t\t\t\tbarsPush( { posX: initialX + posX, freq, freqLo, freqHi, binLo, binHi, ratioLo, ratioHi } );\n\t\t\t}\n\n\t\t}\n\t\telse {\t// Discrete frequencies modes\n\t\t\tbarWidth = 1;\n\n\t\t\tscaleMin = this._freqScaling( _minFreq );\n\t\t\tunitWidth = analyzerWidth / ( this._freqScaling( _maxFreq ) - scaleMin );\n\n\t\t\tconst minIndex = this._freqToBin( _minFreq, 'floor' ),\n\t\t\t\t  maxIndex = this._freqToBin( _maxFreq );\n\n\t \t\tlet lastPos = -999;\n\n\t\t\tfor ( let i = minIndex; i <= maxIndex; i++ ) {\n\t\t\t\tconst freq = this._binToFreq( i ), // frequency represented by this index\n\t\t\t\t\t  posX = initialX + Math.round( unitWidth * ( this._freqScaling( freq ) - scaleMin ) ); // avoid fractionary pixel values\n\n\t\t\t\t// if it's on a different X-coordinate, create a new bar for this frequency\n\t\t\t\tif ( posX > lastPos ) {\n\t\t\t\t\tbarsPush( { posX, freq, freqLo: freq, freqHi: freq, binLo: i, binHi: i, ratioLo: 0, ratioHi: 0 } );\n\t\t\t\t\tlastPos = posX;\n\t\t\t\t} // otherwise, add this frequency to the last bar's range\n\t\t\t\telse if ( bars.length ) {\n\t\t\t\t\tconst lastBar = bars[ bars.length - 1 ];\n\t\t\t\t\tlastBar.binHi = i;\n\t\t\t\t\tlastBar.freqHi = freq;\n\t\t\t\t\tlastBar.freq = ( lastBar.freqLo * freq ) ** .5; // compute center frequency (geometric mean)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t *  COMPUTE ATTRIBUTES FOR THE LED BARS\n\t\t *\n\t\t *\tUSES:\n\t\t *\t\tanalyzerHeight\n\t\t *\t\tbarWidth\n\t\t *\t\tnoLedGap\n\t\t *\n\t\t *\tGENERATES:\n\t\t * \t\tspaceH\n\t\t * \t\tspaceV\n\t\t *\t\tthis._leds\n\t\t */\n\n\t\tlet spaceH = 0,\n\t\t\tspaceV = 0;\n\n\t\tif ( isLeds ) {\n\t\t\t// adjustment for high pixel-ratio values on low-resolution screens (Android TV)\n\t\t\tconst dPR = this._pixelRatio / ( window.devicePixelRatio > 1 && window.screen.height <= 540 ? 2 : 1 );\n\n\t\t\tconst params = [ [],\n\t\t\t\t[ 128,  3, .45  ], // mode 1\n\t\t\t\t[ 128,  4, .225 ], // mode 2\n\t\t\t\t[  96,  6, .225 ], // mode 3\n\t\t\t\t[  80,  6, .225 ], // mode 4\n\t\t\t\t[  80,  6, .125 ], // mode 5\n\t\t\t\t[  64,  6, .125 ], // mode 6\n\t\t\t\t[  48,  8, .125 ], // mode 7\n\t\t\t\t[  24, 16, .125 ], // mode 8\n\t\t\t];\n\n\t\t\t// use custom LED parameters if set, or the default parameters for the current mode\n\t\t\tconst customParams = this._ledParams,\n\t\t\t\t  [ maxLeds, spaceVRatio, spaceHRatio ] = customParams || params[ _mode ];\n\n\t\t\tlet ledCount, maxHeight = analyzerHeight;\n\n\t\t\tif ( customParams ) {\n\t\t\t\tconst minHeight = 2 * dPR;\n\t\t\t\tlet blockHeight;\n\t\t\t\tledCount = maxLeds + 1;\n\t\t\t\tdo {\n\t\t\t\t\tledCount--;\n\t\t\t\t\tblockHeight = maxHeight / ledCount / ( 1 + spaceVRatio );\n\t\t\t\t\tspaceV = blockHeight * spaceVRatio;\n\t\t\t\t} while ( ( blockHeight < minHeight || spaceV < minHeight ) && ledCount > 1 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// calculate vertical spacing - aim for the reference ratio, but make sure it's at least 2px\n\t\t\t\tconst refRatio = 540 / spaceVRatio;\n\t\t\t\tspaceV = Math.min( spaceVRatio * dPR, Math.max( 2, maxHeight / refRatio + .1 | 0 ) );\n\t\t\t}\n\n\t\t\t// remove the extra spacing below the last line of LEDs\n\t\t\tif ( noLedGap )\n\t\t\t\tmaxHeight += spaceV;\n\n\t\t\t// recalculate the number of leds, considering the effective spaceV\n\t\t\tif ( ! customParams )\n\t\t\t\tledCount = Math.min( maxLeds, maxHeight / ( spaceV * 2 ) | 0 );\n\n\t\t\tspaceH = spaceHRatio >= 1 ? spaceHRatio : barWidth * spaceHRatio;\n\n\t\t\tthis._leds = [\n\t\t\t\tledCount,\n\t\t\t\tspaceH,\n\t\t\t\tspaceV,\n\t\t\t\tmaxHeight / ledCount - spaceV // ledHeight\n\t\t\t];\n\t\t}\n\n\t\t// COMPUTE ADDITIONAL BAR POSITIONING, ACCORDING TO THE CURRENT SETTINGS\n\t\t// uses: _barSpace, barWidth, spaceH\n\n\t\tconst barSpacePx = Math.min( barWidth - 1, _barSpace * ( _barSpace > 0 && _barSpace < 1 ? barWidth : 1 ) );\n\n\t\tif ( isBands )\n\t\t\tbarWidth -= Math.max( isLeds ? spaceH : 0, barSpacePx );\n\n\t\tbars.forEach( ( bar, index ) => {\n\t\t\tlet posX  = bar.posX,\n\t\t\t\twidth = barWidth;\n\n\t\t\t// in bands modes we need to update bar.posX to account for bar/led spacing\n\n\t\t\tif ( isBands ) {\n\t\t\t\tif ( _barSpace == 0 && ! isLeds ) {\n\t\t\t\t\t// when barSpace == 0 use integer values for perfect gapless positioning\n\t\t\t\t\tposX |= 0;\n\t\t\t\t\twidth |= 0;\n\t\t\t\t\tif ( index > 0 && posX > bars[ index - 1 ].posX + bars[ index - 1 ].width ) {\n\t\t\t\t\t\tposX--;\n\t\t\t\t\t\twidth++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tposX += Math.max( ( isLeds ? spaceH : 0 ), barSpacePx ) / 2;\n\n\t\t\t\tbar.posX = posX; // update\n\t\t\t}\n\n\t\t\tbar.barCenter = posX + ( barWidth == 1 ? 0 : width / 2 );\n\t\t\tbar.width = width;\n\t\t});\n\n\t\t// COMPUTE CHANNEL COORDINATES (uses spaceV)\n\n\t\tconst channelCoords = [];\n\t\tfor ( const channel of [0,1] ) {\n\t\t\tconst channelTop     = _chLayout == CHANNEL_VERTICAL ? ( channelHeight + channelGap ) * channel : 0,\n\t\t\t\t  channelBottom  = channelTop + channelHeight,\n\t\t\t\t  analyzerBottom = channelTop + analyzerHeight - ( ! isLeds || noLedGap ? 0 : spaceV );\n\n\t\t\tchannelCoords.push( { channelTop, channelBottom, analyzerBottom } );\n\t\t}\n\n\t\t// SAVE INTERNAL PROPERTIES\n\n\t\tthis._aux = { analyzerHeight, analyzerWidth, centerX, centerY, channelCoords, channelHeight, channelGap, initialX, innerRadius, outerRadius, scaleMin, unitWidth };\n\t\tthis._flg = { isAlpha, isBands, isLeds, isLumi, isOctaves, isOutline, isRound, noLedGap };\n\n\t\t// generate the X-axis and radial scales\n\t\tthis._createScales();\n\t}\n\n\t/**\n\t * Generate the X-axis and radial scales in auxiliary canvases\n\t */\n\t_createScales() {\n\t\tif ( ! this._ready )\n\t\t\treturn;\n\n\t\tconst { analyzerWidth, initialX, innerRadius, scaleMin, unitWidth } = this._aux,\n\t\t\t  { canvas, _frequencyScale, _mirror, _noteLabels, _radial, _scaleX, _scaleR } = this,\n\t\t\t  canvasX          = _scaleX.canvas,\n\t\t\t  canvasR          = _scaleR.canvas,\n\t\t\t  freqLabels       = [],\n\t\t\t  isDualHorizontal = this._chLayout == CHANNEL_HORIZONTAL,\n\t\t\t  isDualVertical   = this._chLayout == CHANNEL_VERTICAL,\n\t\t\t  minDimension     = Math.min( canvas.width, canvas.height ),\n\t\t\t  scale            = [ 'C',, 'D',, 'E', 'F',, 'G',, 'A',, 'B' ], // for note labels (no sharp notes)\n\t\t\t  scaleHeight      = minDimension / 34 | 0, // circular scale height (radial mode)\n  \t\t\t  fontSizeX        = canvasX.height >> 1,\n\t\t\t  fontSizeR        = scaleHeight >> 1,\n\t\t\t  labelWidthX      = fontSizeX * ( _noteLabels ? .7 : 1.5 ),\n\t\t\t  labelWidthR      = fontSizeR * ( _noteLabels ? 1 : 2 ),\n\t\t  \t  root12           = 2 ** ( 1 / 12 );\n\n\t\tif ( ! _noteLabels && ( this._ansiBands || _frequencyScale != SCALE_LOG ) ) {\n\t\t\tfreqLabels.push( 16, 31.5, 63, 125, 250, 500, 1e3, 2e3, 4e3 );\n\t\t\tif ( _frequencyScale == SCALE_LINEAR )\n\t\t\t\tfreqLabels.push( 6e3, 8e3, 10e3, 12e3, 14e3, 16e3, 18e3, 20e3, 22e3 );\n\t\t\telse\n\t\t\t\tfreqLabels.push( 8e3, 16e3 );\n\t\t}\n\t\telse {\n\t\t\tlet freq = C_1;\n\t\t\tfor ( let octave = -1; octave < 11; octave++ ) {\n\t\t\t\tfor ( let note = 0; note < 12; note++ ) {\n\t\t\t\t\tif ( freq >= this._minFreq && freq <= this._maxFreq ) {\n\t\t\t\t\t\tconst pitch = scale[ note ],\n\t\t\t\t\t\t\t  isC   = pitch == 'C';\n\t\t\t\t\t\tif ( ( pitch && _noteLabels && ! _mirror && ! isDualHorizontal ) || isC )\n\t\t\t\t\t\t\tfreqLabels.push( _noteLabels ? [ freq, pitch + ( isC ? octave : '' ) ] : freq );\n\t\t\t\t\t}\n\t\t\t\t\tfreq *= root12;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// in radial dual-vertical layout, the scale is positioned exactly between both channels, by making the canvas a bit larger than the inner diameter\n\t\tcanvasR.width = canvasR.height = Math.max( minDimension * .15, ( innerRadius << 1 ) + ( isDualVertical * scaleHeight ) );\n\n\t\tconst centerR = canvasR.width >> 1,\n\t\t\t  radialY = centerR - scaleHeight * .7;\t// vertical position of text labels in the circular scale\n\n\t\t// helper function\n\t\tconst radialLabel = ( x, label ) => {\n\t\t\tconst angle  = TAU * ( x / canvas.width ),\n\t\t\t\t  adjAng = angle - HALF_PI, // rotate angles so 0 is at the top\n\t\t\t\t  posX   = radialY * Math.cos( adjAng ),\n\t\t\t\t  posY   = radialY * Math.sin( adjAng );\n\n\t\t\t_scaleR.save();\n\t\t\t_scaleR.translate( centerR + posX, centerR + posY );\n\t\t\t_scaleR.rotate( angle );\n\t\t\t_scaleR.fillText( label, 0, 0 );\n\t\t\t_scaleR.restore();\n\t\t}\n\n\t\t// clear scale canvas\n\t\tcanvasX.width |= 0;\n\n\t\t_scaleX.fillStyle = _scaleR.strokeStyle = SCALEX_BACKGROUND_COLOR;\n\t\t_scaleX.fillRect( 0, 0, canvasX.width, canvasX.height );\n\n\t\t_scaleR.arc( centerR, centerR, centerR - scaleHeight / 2, 0, TAU );\n\t\t_scaleR.lineWidth = scaleHeight;\n\t\t_scaleR.stroke();\n\n\t\t_scaleX.fillStyle = _scaleR.fillStyle = SCALEX_LABEL_COLOR;\n\t\t_scaleX.font = `${ fontSizeX }px ${FONT_FAMILY}`;\n\t\t_scaleR.font = `${ fontSizeR }px ${FONT_FAMILY}`;\n\t\t_scaleX.textAlign = _scaleR.textAlign = 'center';\n\n\t\tlet prevX = -labelWidthX / 4,\n\t\t\tprevR = -labelWidthR;\n\n\t\tfor ( const item of freqLabels ) {\n\t\t\tconst [ freq, label ] = Array.isArray( item ) ? item : [ item, item < 1e3 ? item | 0 : `${ ( item / 100 | 0 ) / 10 }k` ],\n\t\t\t\t  x    = unitWidth * ( this._freqScaling( freq ) - scaleMin ),\n\t\t\t\t  y    = canvasX.height * .75,\n\t\t\t\t  isC  = label[0] == 'C',\n\t  \t\t\t  maxW = fontSizeX * ( _noteLabels && ! _mirror && ! isDualHorizontal ? ( isC ? 1.2 : .6 ) : 3 );\n\n\t  \t\t// set label color - no highlight when mirror effect is active (only Cs displayed)\n\t\t\t_scaleX.fillStyle = _scaleR.fillStyle = isC && ! _mirror && ! isDualHorizontal ? SCALEX_HIGHLIGHT_COLOR : SCALEX_LABEL_COLOR;\n\n\t\t\t// prioritizes which note labels are displayed, due to the restricted space on some ranges/scales\n\t\t\tif ( _noteLabels ) {\n\t\t\t\tconst isLog = _frequencyScale == SCALE_LOG,\n\t\t\t\t\t  isLinear = _frequencyScale == SCALE_LINEAR;\n\n\t\t\t\tlet allowedLabels = ['C'];\n\n\t\t\t\tif ( isLog || freq > 2e3 || ( ! isLinear && freq > 250 ) ||\n\t\t\t\t\t ( ( ! _radial || isDualVertical ) && ( ! isLinear && freq > 125 || freq > 1e3 ) ) )\n\t\t\t\t\tallowedLabels.push('G');\n\t\t\t\tif ( isLog || freq > 4e3 || ( ! isLinear && freq > 500 ) ||\n\t\t\t\t\t ( ( ! _radial || isDualVertical ) && ( ! isLinear && freq > 250 || freq > 2e3 ) ) )\n\t\t\t\t\tallowedLabels.push('E');\n\t\t\t\tif ( isLinear && freq > 4e3 ||\n\t\t\t\t\t ( ( ! _radial || isDualVertical ) && ( isLog || freq > 2e3 || ( ! isLinear && freq > 500 ) ) ) )\n\t\t\t\t\tallowedLabels.push('D','F','A','B');\n\t\t\t\tif ( ! allowedLabels.includes( label[0] ) )\n\t\t\t\t\tcontinue; // skip this label\n\t\t\t}\n\n\t\t\t// linear scale\n\t\t\tif ( x >= prevX + labelWidthX / 2 && x <= analyzerWidth ) {\n\t\t\t\t_scaleX.fillText( label, isDualHorizontal && _mirror == -1 ? analyzerWidth - x : initialX + x, y, maxW );\n\t\t\t\tif ( isDualHorizontal || ( _mirror && ( x > labelWidthX || _mirror == 1 ) ) )\n\t\t\t\t\t_scaleX.fillText( label, isDualHorizontal && _mirror != 1 ? analyzerWidth + x : ( initialX || canvas.width ) - x, y, maxW );\n\t\t\t\tprevX = x + Math.min( maxW, _scaleX.measureText( label ).width ) / 2;\n\t\t\t}\n\n\t\t\t// radial scale\n\t\t\tif ( x >= prevR + labelWidthR && x < analyzerWidth - labelWidthR ) { // avoid overlapping the last label over the first one\n\t\t\t\tradialLabel( isDualHorizontal && _mirror == 1 ? analyzerWidth - x : x, label );\n\t\t\t\tif ( isDualHorizontal || ( _mirror && ( x > labelWidthR || _mirror == 1 ) ) ) // avoid overlapping of first labels on mirror mode\n\t\t\t\t\tradialLabel( isDualHorizontal && _mirror != -1 ? analyzerWidth + x : -x, label );\n\t\t\t\tprevR = x;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Redraw the canvas\n\t * this is called 60 times per second by requestAnimationFrame()\n\t */\n\t_draw( timestamp ) {\n\t\t// schedule next canvas update\n\t\tthis._runId = requestAnimationFrame( timestamp => this._draw( timestamp ) );\n\n\t\t// frame rate control\n\t\tconst elapsed        = timestamp - this._time, // time since last FPS computation\n\t\t\t  frameTime      = timestamp - this._last, // time since last rendered frame\n\t\t\t  targetInterval = this._maxFPS ? 975 / this._maxFPS : 0; // small tolerance for best results\n\n\t\tif ( frameTime < targetInterval )\n\t\t\treturn;\n\n\t\tthis._last = timestamp - ( targetInterval ? frameTime % targetInterval : 0 ); // thanks https://stackoverflow.com/a/19772220/2370385\n\t\tthis._frames++;\n\n\t\tif ( elapsed >= 1000 ) { // update FPS every second\n\t\t\tthis._fps = this._frames / elapsed * 1000;\n\t\t\tthis._frames = 0;\n\t\t\tthis._time = timestamp;\n\t\t}\n\n\t\t// initialize local constants\n\n\t\tconst { isAlpha,\n\t\t\t    isBands,\n\t\t\t    isLeds,\n\t\t\t    isLumi,\n\t\t\t    isOctaves,\n\t\t\t    isOutline,\n\t\t\t    isRound,\n\t\t\t    noLedGap }     = this._flg,\n\n\t\t\t  { analyzerHeight,\n\t\t\t    centerX,\n\t\t\t    centerY,\n\t\t\t    channelCoords,\n\t\t\t    channelHeight,\n\t\t\t    channelGap,\n\t\t\t    initialX,\n\t\t\t    innerRadius,\n\t\t\t    outerRadius }  = this._aux,\n\n\t\t\t  { _bars,\n\t\t\t    canvas,\n\t\t\t    _canvasGradients,\n\t\t\t    _chLayout,\n\t\t\t    _colorMode,\n\t\t\t    _ctx,\n\t\t\t    _energy,\n\t\t\t    fillAlpha,\n\t\t\t    _fps,\n\t\t\t    _linearAmplitude,\n\t\t\t    _lineWidth,\n\t\t\t    maxDecibels,\n\t\t\t    minDecibels,\n\t\t\t    _mirror,\n\t\t\t    _mode,\n\t\t\t    overlay,\n\t\t\t    _radial,\n\t\t\t    showBgColor,\n\t\t\t    showPeaks,\n\t\t\t    useCanvas,\n\t\t\t    _weightingFilter } = this,\n\n\t\t\t  canvasX          = this._scaleX.canvas,\n\t\t\t  canvasR          = this._scaleR.canvas,\n\t\t\t  holdFrames       = _fps >> 1, // number of frames in half a second\n\t\t\t  isDualCombined   = _chLayout == CHANNEL_COMBINED,\n\t\t\t  isDualHorizontal = _chLayout == CHANNEL_HORIZONTAL,\n\t\t\t  isDualVertical   = _chLayout == CHANNEL_VERTICAL,\n\t\t\t  isSingle         = _chLayout == CHANNEL_SINGLE,\n\t\t\t  isTrueLeds       = isLeds && this._trueLeds && _colorMode == COLOR_GRADIENT,\n\t\t\t  analyzerWidth    = _radial ? canvas.width : this._aux.analyzerWidth,\n\t\t\t  finalX           = initialX + analyzerWidth,\n\t\t\t  showPeakLine     = showPeaks && this._peakLine && _mode == MODE_GRAPH,\n\t\t\t  maxBarHeight     = _radial ? outerRadius - innerRadius : analyzerHeight,\n\t\t\t  dbRange \t\t   = maxDecibels - minDecibels,\n\t\t\t  [ ledCount, ledSpaceH, ledSpaceV, ledHeight ] = this._leds || [];\n\n\t\tif ( _energy.val > 0 && _fps > 0 )\n\t\t\tthis._spinAngle += this._spinSpeed * TAU / 60 / _fps; // spinSpeed * angle increment per frame for 1 RPM\n\n\t\t/* HELPER FUNCTIONS */\n\n\t\t// create Reflex effect\n\t\tconst doReflex = channel => {\n\t\t\tif ( this._reflexRatio > 0 && ! isLumi && ! _radial ) {\n\t\t\t\tlet posY, height;\n\t\t\t\tif ( this.reflexFit || isDualVertical ) { // always fit reflex in vertical stereo mode\n\t\t\t\t\tposY   = isDualVertical && channel == 0 ? channelHeight + channelGap : 0;\n\t\t\t\t\theight = channelHeight - analyzerHeight;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tposY   = canvas.height - analyzerHeight * 2;\n\t\t\t\t\theight = analyzerHeight;\n\t\t\t\t}\n\n\t\t\t\t_ctx.save();\n\n\t\t\t\t// set alpha and brightness for the reflection\n\t\t\t\t_ctx.globalAlpha = this.reflexAlpha;\n\t\t\t\tif ( this.reflexBright != 1 )\n\t\t\t\t\t_ctx.filter = `brightness(${this.reflexBright})`;\n\n\t\t\t\t// create the reflection\n\t\t\t\t_ctx.setTransform( 1, 0, 0, -1, 0, canvas.height );\n\t\t\t\t_ctx.drawImage( canvas, 0, channelCoords[ channel ].channelTop, canvas.width, analyzerHeight, 0, posY, canvas.width, height );\n\n\t\t\t\t_ctx.restore();\n\t\t\t}\n\t\t}\n\n\t\t// draw scale on X-axis\n\t\tconst drawScaleX = () => {\n\t\t\tif ( this.showScaleX ) {\n\t\t\t\tif ( _radial ) {\n\t\t\t\t\t_ctx.save();\n\t\t\t\t\t_ctx.translate( centerX, centerY );\n\t\t\t\t\tif ( this._spinSpeed )\n\t\t\t\t\t\t_ctx.rotate( this._spinAngle + HALF_PI );\n\t\t\t\t\t_ctx.drawImage( canvasR, -canvasR.width >> 1, -canvasR.width >> 1 );\n\t\t\t\t\t_ctx.restore();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\t_ctx.drawImage( canvasX, 0, canvas.height - canvasX.height );\n\t\t\t}\n\t\t}\n\n\t\t// returns the gain (in dB) for a given frequency, considering the currently selected weighting filter\n\t\tconst weightingdB = freq => {\n\t\t\tconst f2 = freq ** 2,\n\t\t\t\t  SQ20_6  = 424.36,\n\t\t\t\t  SQ107_7 = 11599.29,\n\t\t\t\t  SQ158_5 = 25122.25,\n\t\t\t\t  SQ737_9 = 544496.41,\n\t\t\t\t  SQ12194 = 148693636,\n\t\t\t\t  linearTodB = value => 20 * Math.log10( value );\n\n\t\t\tswitch ( _weightingFilter ) {\n\t\t\t\tcase FILTER_A : // A-weighting https://en.wikipedia.org/wiki/A-weighting\n\t\t\t\t\tconst rA = ( SQ12194 * f2 ** 2 ) / ( ( f2 + SQ20_6 ) * Math.sqrt( ( f2 + SQ107_7 ) * ( f2 + SQ737_9 ) ) * ( f2 + SQ12194 ) );\n\t\t\t\t\treturn 2 + linearTodB( rA );\n\n\t\t\t\tcase FILTER_B :\n\t\t\t\t\tconst rB = ( SQ12194 * f2 * freq ) / ( ( f2 + SQ20_6 ) * Math.sqrt( f2 + SQ158_5 ) * ( f2 + SQ12194 ) );\n\t\t\t\t\treturn .17 + linearTodB( rB );\n\n\t\t\t\tcase FILTER_C :\n\t\t\t\t\tconst rC = ( SQ12194 * f2 ) / ( ( f2 + SQ20_6 ) * ( f2 + SQ12194 ) );\n\t\t\t\t\treturn .06 + linearTodB( rC );\n\n\t\t\t\tcase FILTER_D :\n\t\t\t\t\tconst h = ( ( 1037918.48 - f2 ) ** 2 + 1080768.16 * f2 ) / ( ( 9837328 - f2 ) ** 2 + 11723776 * f2 ),\n\t\t\t\t\t\t  rD = ( freq / 6.8966888496476e-5 ) * Math.sqrt( h / ( ( f2 + 79919.29 ) * ( f2 + 1345600 ) ) );\n\t\t\t\t\treturn linearTodB( rD );\n\n\t\t\t\tcase FILTER_468 : // ITU-R 468 https://en.wikipedia.org/wiki/ITU-R_468_noise_weighting\n\t\t\t\t\tconst h1 = -4.737338981378384e-24 * freq ** 6 + 2.043828333606125e-15 * freq ** 4 - 1.363894795463638e-7 * f2 + 1,\n\t\t\t\t\t\t  h2 = 1.306612257412824e-19 * freq ** 5 - 2.118150887518656e-11 * freq ** 3 + 5.559488023498642e-4 * freq,\n\t\t\t\t\t\t  rI = 1.246332637532143e-4 * freq / Math.hypot( h1, h2 );\n\t\t\t\t\treturn 18.2 + linearTodB( rI );\n\t\t\t}\n\n\t\t\treturn 0; // unknown filter\n\t\t}\n\n\t\t// draws (stroke) a bar from x,y1 to x,y2\n\t\tconst strokeBar = ( x, y1, y2 ) => {\n\t\t\t_ctx.beginPath();\n\t\t\t_ctx.moveTo( x, y1 );\n\t\t\t_ctx.lineTo( x, y2 );\n\t\t\t_ctx.stroke();\n\t\t}\n\n\t\t// conditionally strokes current path on canvas\n\t\tconst strokeIf = flag => {\n\t\t\tif ( flag && _lineWidth ) {\n\t\t\t\tconst alpha = _ctx.globalAlpha;\n\t\t\t\t_ctx.globalAlpha = 1;\n\t\t\t\t_ctx.stroke();\n\t\t\t\t_ctx.globalAlpha = alpha;\n\t\t\t}\n\t\t}\n\n\t\t// converts a value in [0;1] range to a height in pixels that fits into the current LED elements\n\t\tconst ledPosY = value => Math.max( 0, ( value * ledCount | 0 ) * ( ledHeight + ledSpaceV ) - ledSpaceV );\n\n\t\t// update energy information\n\t\tconst updateEnergy = newVal => {\n\t\t\t_energy.val = newVal;\n\t\t\tif ( _energy.peak > 0 ) {\n\t\t\t\t_energy.hold--;\n\t\t\t\tif ( _energy.hold < 0 )\n\t\t\t\t\t_energy.peak += _energy.hold / ( holdFrames * holdFrames / 2 );\n\t\t\t}\n\t\t\tif ( newVal >= _energy.peak ) {\n\t\t\t\t_energy.peak = newVal;\n\t\t\t\t_energy.hold = holdFrames;\n\t\t\t}\n\t\t}\n\n\t\t/* MAIN FUNCTION */\n\n\t\tif ( overlay )\n\t\t\t_ctx.clearRect( 0, 0, canvas.width, canvas.height );\n\n\t\tlet currentEnergy = 0;\n\n\t\tconst nBars     = _bars.length,\n\t\t\t  nChannels = isSingle ? 1 : 2;\n\n\t\tfor ( let channel = 0; channel < nChannels; channel++ ) {\n\n\t\t\tconst { channelTop, channelBottom, analyzerBottom } = channelCoords[ channel ],\n\t\t\t\t  channelGradient  = this._gradients[ this._selectedGrads[ channel ] ],\n\t\t\t\t  colorStops       = channelGradient.colorStops,\n\t\t\t\t  colorCount       = colorStops.length,\n\t\t\t\t  bgColor          = ( ! showBgColor || isLeds && ! overlay ) ? '#000' : channelGradient.bgColor,\n\t\t\t\t  radialDirection  = isDualVertical && _radial && channel ? -1 : 1, // 1 = outwards, -1 = inwards\n\t\t\t\t  invertedChannel  = ( ! channel && _mirror == -1 ) || ( channel && _mirror == 1 ),\n\t\t\t\t  radialOffsetX    = ! isDualHorizontal || ( channel && _mirror != 1 ) ? 0 : analyzerWidth >> ( channel || ! invertedChannel ),\n\t\t\t\t  angularDirection = isDualHorizontal && invertedChannel ? -1 : 1;  // 1 = clockwise, -1 = counterclockwise\n/*\n\t\t\tExpanded logic for radialOffsetX and angularDirection:\n\n\t\t\tlet radialOffsetX = 0,\n\t\t\t\tangularDirection = 1;\n\n\t\t\tif ( isDualHorizontal ) {\n\t\t\t\tif ( channel == 0 ) { // LEFT channel\n\t\t\t\t\tif ( _mirror == -1 ) {\n\t\t\t\t\t\tradialOffsetX = analyzerWidth;\n\t\t\t\t\t\tangularDirection = -1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tradialOffsetX = analyzerWidth >> 1;\n\t\t\t\t}\n\t\t\t\telse {                // RIGHT channel\n\t\t\t\t\tif ( _mirror == 1 ) {\n\t\t\t\t\t\tradialOffsetX = analyzerWidth >> 1;\n\t\t\t\t\t\tangularDirection = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n*/\n\t\t\t// draw scale on Y-axis (uses: channel, channelTop)\n\t\t\tconst drawScaleY = () => {\n\t\t\t\tconst scaleWidth = canvasX.height,\n\t\t\t\t\t  fontSize   = scaleWidth >> 1,\n\t\t\t\t\t  max        = _linearAmplitude ? 100 : maxDecibels,\n\t\t\t\t\t  min        = _linearAmplitude ? 0 : minDecibels,\n\t\t\t\t\t  incr       = _linearAmplitude ? 20 : 5,\n\t\t\t\t\t  interval   = analyzerHeight / ( max - min ),\n\t\t\t\t\t  atStart    = _mirror != -1 && ( ! isDualHorizontal || channel == 0 || _mirror == 1 ),\n\t\t\t\t\t  atEnd      = _mirror != 1 && ( ! isDualHorizontal || channel != _mirror );\n\n\t\t\t\t_ctx.save();\n\t\t\t\t_ctx.fillStyle = SCALEY_LABEL_COLOR;\n\t\t\t\t_ctx.font = `${fontSize}px ${FONT_FAMILY}`;\n\t\t\t\t_ctx.textAlign = 'right';\n\t\t\t\t_ctx.lineWidth = 1;\n\n\t\t\t\tfor ( let val = max; val > min; val -= incr ) {\n\t\t\t\t\tconst posY = channelTop + ( max - val ) * interval,\n\t\t\t\t\t\t  even = ( val % 2 == 0 ) | 0;\n\n\t\t\t\t\tif ( even ) {\n\t\t\t\t\t\tconst labelY = posY + fontSize * ( posY == channelTop ? .8 : .35 );\n\t\t\t\t\t\tif ( atStart )\n\t\t\t\t\t\t\t_ctx.fillText( val, scaleWidth * .85, labelY );\n\t\t\t\t\t\tif ( atEnd )\n\t\t\t\t\t\t\t_ctx.fillText( val, ( isDualHorizontal ? analyzerWidth : canvas.width ) - scaleWidth * .1, labelY );\n\t\t\t\t\t\t_ctx.strokeStyle = SCALEY_LABEL_COLOR;\n\t\t\t\t\t\t_ctx.setLineDash([2,4]);\n\t\t\t\t\t\t_ctx.lineDashOffset = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t_ctx.strokeStyle = SCALEY_MIDLINE_COLOR;\n\t\t\t\t\t\t_ctx.setLineDash([2,8]);\n\t\t\t\t\t\t_ctx.lineDashOffset = 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t_ctx.beginPath();\n\t\t\t\t\t_ctx.moveTo( initialX + scaleWidth * even * atStart, ~~posY + .5 ); // for sharp 1px line (https://stackoverflow.com/a/13879402/2370385)\n\t\t\t\t\t_ctx.lineTo( finalX - scaleWidth * even * atEnd, ~~posY + .5 );\n\t\t\t\t\t_ctx.stroke();\n\t\t\t\t}\n\t\t\t\t_ctx.restore();\n\t\t\t}\n\n\t\t\t// FFT bin data interpolation (uses fftData)\n\t\t\tconst interpolate = ( bin, ratio ) => {\n\t\t\t\tconst value = fftData[ bin ] + ( bin < fftData.length - 1 ? ( fftData[ bin + 1 ] - fftData[ bin ] ) * ratio : 0 );\n\t\t\t\treturn isNaN( value ) ? -Infinity : value;\n\t\t\t}\n\n\t\t\t// converts a given X-coordinate to its corresponding angle in radial mode (uses angularDirection)\n\t\t\tconst getAngle = ( x, dir = angularDirection ) => dir * TAU * ( ( x + radialOffsetX ) / canvas.width ) + this._spinAngle;\n\n\t\t\t// converts planar X,Y coordinates to radial coordinates (uses: getAngle(), radialDirection)\n\t\t\tconst radialXY = ( x, y, dir ) => {\n\t\t\t\tconst height = innerRadius + y * radialDirection,\n\t\t\t\t\t  angle  = getAngle( x, dir );\n\t\t\t\treturn [ centerX + height * Math.cos( angle ), centerY + height * Math.sin( angle ) ];\n\t\t\t}\n\n\t\t\t// draws a polygon of width `w` and height `h` at (x,y) in radial mode (uses: angularDirection, radialDirection)\n\t\t\tconst radialPoly = ( x, y, w, h, stroke ) => {\n\t\t\t\t_ctx.beginPath();\n\t\t\t\tfor ( const dir of ( _mirror && ! isDualHorizontal ? [1,-1] : [ angularDirection ] ) ) {\n\t\t\t\t\tconst [ startAngle, endAngle ] = isRound ? [ getAngle( x, dir ), getAngle( x + w, dir ) ] : [];\n\t\t\t\t\t_ctx.moveTo( ...radialXY( x, y, dir ) );\n\t\t\t\t\t_ctx.lineTo( ...radialXY( x, y + h, dir ) );\n\t\t\t\t\tif ( isRound )\n\t\t\t\t\t\t_ctx.arc( centerX, centerY, innerRadius + ( y + h ) * radialDirection, startAngle, endAngle, dir != 1 );\n\t\t\t\t\telse\n\t\t\t\t\t\t_ctx.lineTo( ...radialXY( x + w, y + h, dir ) );\n\t\t\t\t\t_ctx.lineTo( ...radialXY( x + w, y, dir ) );\n\t\t\t\t\tif ( isRound && ! stroke ) // close the bottom line only when not in outline mode\n\t\t\t\t\t\t_ctx.arc( centerX, centerY, innerRadius + y * radialDirection, endAngle, startAngle, dir == 1 );\n\t\t\t\t}\n\t\t\t\tstrokeIf( stroke );\n\t\t\t\t_ctx.fill();\n\t\t\t}\n\n\t\t\t// set fillStyle and strokeStyle according to current colorMode (uses: channel, colorStops, colorCount)\n\t\t\tconst setBarColor = ( value = 0, barIndex = 0 ) => {\n\t\t\t\tlet color;\n\t\t\t\t// for graph mode, always use the channel gradient (ignore colorMode)\n\t\t\t\tif ( ( _colorMode == COLOR_GRADIENT && ! isTrueLeds ) || _mode == MODE_GRAPH )\n\t\t\t\t\tcolor = _canvasGradients[ channel ];\n\t\t\t\telse {\n\t\t\t\t\tconst selectedIndex = _colorMode == COLOR_BAR_INDEX ? barIndex % colorCount : colorStops.findLastIndex( item => isLeds ? ledPosY( value ) <= ledPosY( item.level ) : value <= item.level );\n\t\t\t\t\tcolor = colorStops[ selectedIndex ].color;\n\t\t\t\t}\n\t\t\t\t_ctx.fillStyle = _ctx.strokeStyle = color;\n\t\t\t}\n\n\t\t\t// CHANNEL START\n\n\t\t\tif ( useCanvas ) {\n\t\t\t\t// set transform (horizontal flip and translation) for dual-horizontal layout\n\t\t\t\tif ( isDualHorizontal && ! _radial ) {\n\t\t\t\t  \tconst translateX = analyzerWidth * ( channel + invertedChannel ),\n\t\t\t\t  \t\t  flipX      = invertedChannel ? -1 : 1;\n\n\t\t\t\t\t_ctx.setTransform( flipX, 0, 0, 1, translateX, 0 );\n\t\t\t\t}\n\n\t\t\t\t// fill the analyzer background if needed (not overlay or overlay + showBgColor)\n\t\t\t\tif ( ! overlay || showBgColor ) {\n\t\t\t\t\tif ( overlay )\n\t\t\t\t\t\t_ctx.globalAlpha = this.bgAlpha;\n\n\t\t\t\t\t_ctx.fillStyle = bgColor;\n\n\t\t\t\t\t// exclude the reflection area when overlay is true and reflexAlpha == 1 (avoids alpha over alpha difference, in case bgAlpha < 1)\n\t\t\t\t\tif ( channel == 0 || ( ! _radial && ! isDualCombined ) )\n\t\t\t\t\t\t_ctx.fillRect( initialX, channelTop - channelGap, analyzerWidth, ( overlay && this.reflexAlpha == 1 ? analyzerHeight : channelHeight ) + channelGap );\n\n\t\t\t\t\t_ctx.globalAlpha = 1;\n\t\t\t\t}\n\n\t\t\t\t// draw dB scale (Y-axis) - avoid drawing it twice on 'dual-combined' channel layout\n\t\t\t\tif ( this.showScaleY && ! isLumi && ! _radial && ( channel == 0 || ! isDualCombined ) )\n\t\t\t\t\tdrawScaleY();\n\n\t\t\t\t// set line width and dash for LEDs effect\n\t\t\t\tif ( isLeds ) {\n\t\t\t\t\t_ctx.setLineDash( [ ledHeight, ledSpaceV ] );\n\t\t\t\t\t_ctx.lineWidth = _bars[0].width;\n\t\t\t\t}\n\t\t\t\telse // for outline effect ensure linewidth is not greater than half the bar width\n\t\t\t\t\t_ctx.lineWidth = isOutline ? Math.min( _lineWidth, _bars[0].width / 2 ) : _lineWidth;\n\n\t\t\t\t// set clipping region\n\t\t\t\t_ctx.save();\n\t\t\t\tif ( ! _radial ) {\n\t\t\t\t\tconst region = new Path2D();\n\t\t\t\t\tregion.rect( 0, channelTop, canvas.width, analyzerHeight );\n\t\t\t\t\t_ctx.clip( region );\n\t\t\t\t}\n\n\t\t\t} // if ( useCanvas )\n\n\t\t\t// get a new array of data from the FFT\n\t\t\tlet fftData = this._fftData[ channel ];\n\t\t\tthis._analyzer[ channel ].getFloatFrequencyData( fftData );\n\n\t\t\t// apply weighting\n\t\t\tif ( _weightingFilter )\n\t\t\t\tfftData = fftData.map( ( val, idx ) => val + weightingdB( this._binToFreq( idx ) ) );\n\n\t\t\t// start drawing path (for graph mode)\n\t\t\t_ctx.beginPath();\n\n\t\t\t// store line graph points to create mirror effect in radial mode\n\t\t\tlet points = [];\n\n\t\t\t// draw bars / lines\n\n\t\t\tfor ( let barIndex = 0; barIndex < nBars; barIndex++ ) {\n\n\t\t\t\tconst bar = _bars[ barIndex ],\n\t\t\t\t\t  { posX, barCenter, width, freq, binLo, binHi, ratioLo, ratioHi } = bar;\n\n\t\t\t\tlet barValue = Math.max( interpolate( binLo, ratioLo ), interpolate( binHi, ratioHi ) );\n\n\t\t\t\t// check additional bins (if any) for this bar and keep the highest value\n\t\t\t\tfor ( let j = binLo + 1; j < binHi; j++ ) {\n\t\t\t\t\tif ( fftData[ j ] > barValue )\n\t\t\t\t\t\tbarValue = fftData[ j ];\n\t\t\t\t}\n\n\t\t\t\t// normalize bar amplitude in [0;1] range\n\t\t\t\tbarValue = this._normalizedB( barValue );\n\n\t\t\t\tbar.value[ channel ] = barValue;\n\t\t\t\tcurrentEnergy += barValue;\n\n\t\t\t\t// update bar peak\n\t\t\t\tif ( bar.peak[ channel ] > 0 ) {\n\t\t\t\t\tbar.hold[ channel ]--;\n\t\t\t\t\t// if hold is negative, it becomes the \"acceleration\" for peak drop\n\t\t\t\t\tif ( bar.hold[ channel ] < 0 )\n\t\t\t\t\t\tbar.peak[ channel ] += bar.hold[ channel ] / ( holdFrames * holdFrames / 2 );\n\t\t\t\t}\n\n\t\t\t\t// check if it's a new peak for this bar\n\t\t\t\tif ( barValue >= bar.peak[ channel ] ) {\n\t\t\t\t\tbar.peak[ channel ] = barValue;\n\t\t\t\t\tbar.hold[ channel ] = holdFrames;\n\t\t\t\t}\n\n\t\t\t\t// if not using the canvas, move earlier to the next bar\n\t\t\t\tif ( ! useCanvas )\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// set opacity for bar effects\n\t\t\t\tif ( isLumi || isAlpha )\n\t\t\t\t\t_ctx.globalAlpha = barValue;\n\t\t\t\telse if ( isOutline )\n\t\t\t\t\t_ctx.globalAlpha = fillAlpha;\n\n\t\t\t\t// set fillStyle and strokeStyle for the current bar\n\t\t\t\tsetBarColor( barValue, barIndex );\n\n\t\t\t\t// compute actual bar height on screen\n\t\t\t\tconst barHeight = isLumi ? maxBarHeight : isLeds ? ledPosY( barValue ) : barValue * maxBarHeight | 0;\n\n\t\t\t\t// Draw current bar or line segment\n\n\t\t\t\tif ( _mode == MODE_GRAPH ) {\n\t\t\t\t\t// compute the average between the initial bar (barIndex==0) and the next one\n\t\t\t\t\t// used to smooth the curve when the initial posX is off the screen, in mirror and radial modes\n\t\t\t\t\tconst nextBarAvg = barIndex ? 0 : ( this._normalizedB( fftData[ _bars[1].binLo ] ) * maxBarHeight + barHeight ) / 2;\n\n\t\t\t\t\tif ( _radial ) {\n\t\t\t\t\t\tif ( barIndex == 0 ) {\n\t\t\t\t\t\t\tif ( isDualHorizontal )\n\t\t\t\t\t\t\t\t_ctx.moveTo( ...radialXY( 0, 0 ) );\n\t\t\t\t\t\t\t_ctx.lineTo( ...radialXY( 0, ( posX < 0 ? nextBarAvg : barHeight ) ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// draw line to the current point, avoiding overlapping wrap-around frequencies\n\t\t\t\t\t\tif ( posX >= 0 ) {\n\t\t\t\t\t\t\tconst point = [ posX, barHeight ];\n\t\t\t\t\t\t\t_ctx.lineTo( ...radialXY( ...point ) );\n\t\t\t\t\t\t\tpoints.push( point );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse { // Linear\n\t\t\t\t\t\tif ( barIndex == 0 ) {\n\t\t\t\t\t\t\t// start the line off-screen using the previous FFT bin value as the initial amplitude\n\t\t\t\t\t\t\tif ( _mirror == -1 && ! isDualHorizontal )\n\t\t\t\t\t\t\t\t_ctx.moveTo( initialX, analyzerBottom - ( posX < initialX ? nextBarAvg : barHeight ) );\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tconst prevFFTData = binLo ? this._normalizedB( fftData[ binLo - 1 ] ) * maxBarHeight : barHeight; // use previous FFT bin value, when available\n\t\t\t\t\t\t\t\t_ctx.moveTo( initialX - _lineWidth, analyzerBottom - prevFFTData );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// draw line to the current point\n\t\t\t\t\t\t// avoid X values lower than the origin when mirroring left, otherwise draw them for best graph accuracy\n\t\t\t\t\t\tif ( isDualHorizontal || _mirror != -1 || posX >= initialX )\n\t\t\t\t\t\t\t_ctx.lineTo( posX, analyzerBottom - barHeight );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( isLeds ) {\n\t\t\t\t\t\t// draw \"unlit\" leds - avoid drawing it twice on 'dual-combined' channel layout\n\t\t\t\t\t\tif ( showBgColor && ! overlay && ( channel == 0 || ! isDualCombined ) ) {\n\t\t\t\t\t\t\tconst alpha = _ctx.globalAlpha;\n\t\t\t\t\t\t\t_ctx.strokeStyle = LEDS_UNLIT_COLOR;\n\t\t\t\t\t\t\t_ctx.globalAlpha = 1;\n\t\t\t\t\t\t\tstrokeBar( barCenter, channelTop, analyzerBottom );\n\t\t\t\t\t\t\t// restore properties\n\t\t\t\t\t\t\t_ctx.strokeStyle = _ctx.fillStyle;\n\t\t\t\t\t\t\t_ctx.globalAlpha = alpha;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( isTrueLeds ) {\n\t\t\t\t\t\t\t// ledPosY() is used below to fit one entire led height into the selected range\n\t\t\t\t\t\t\tconst colorIndex = isLumi ? 0 : colorStops.findLastIndex( item => ledPosY( barValue ) <= ledPosY( item.level ) );\n\t\t\t\t\t\t\tlet last = analyzerBottom;\n\t\t\t\t\t\t\tfor ( let i = colorCount - 1; i >= colorIndex; i-- ) {\n\t\t\t\t\t\t\t\t_ctx.strokeStyle = colorStops[ i ].color;\n\t\t\t\t\t\t\t\tlet y = analyzerBottom - ( i == colorIndex ? barHeight : ledPosY( colorStops[ i ].level ) );\n\t\t\t\t\t\t\t\tstrokeBar( barCenter, last, y );\n\t\t\t\t\t\t\t\tlast = y - ledSpaceV;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tstrokeBar( barCenter, analyzerBottom, analyzerBottom - barHeight );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( posX >= initialX ) {\n\t\t\t\t\t\tif ( _radial )\n\t\t\t\t\t\t\tradialPoly( posX, 0, width, barHeight, isOutline );\n\t\t\t\t\t\telse if ( isRound ) {\n\t\t\t\t\t\t\tconst halfWidth = width / 2,\n\t\t\t\t\t\t\t\t  y = analyzerBottom + halfWidth; // round caps have an additional height of half bar width\n\n\t\t\t\t\t\t\t_ctx.beginPath();\n\t\t\t\t\t\t\t_ctx.moveTo( posX, y );\n\t\t\t\t\t\t\t_ctx.lineTo( posX, y - barHeight );\n\t\t\t\t\t\t\t_ctx.arc( barCenter, y - barHeight, halfWidth, PI, TAU );\n\t\t\t\t\t\t\t_ctx.lineTo( posX + width, y );\n\t\t\t\t\t\t\tstrokeIf( isOutline );\n\t\t\t\t\t\t\t_ctx.fill();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst offset = isOutline ? _ctx.lineWidth : 0;\n\t\t\t\t\t\t\t_ctx.beginPath();\n\t\t\t\t\t\t\t_ctx.rect( posX, analyzerBottom + offset, width, -barHeight - offset );\n\t\t\t\t\t\t\tstrokeIf( isOutline );\n\t\t\t\t\t\t\t_ctx.fill();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Draw peak\n\t\t\t\tconst peak = bar.peak[ channel ];\n\t\t\t\tif ( peak > 0 && showPeaks && ! showPeakLine && ! isLumi && posX >= initialX && posX < finalX ) {\n\t\t\t\t\t// set opacity\n\t\t\t\t\tif ( isOutline && _lineWidth > 0 )\n\t\t\t\t\t\t_ctx.globalAlpha = 1;\n\t\t\t\t\telse if ( isAlpha )\n\t\t\t\t\t\t_ctx.globalAlpha = peak;\n\n\t\t\t\t\t// select the peak color for 'bar-level' colorMode or 'trueLeds'\n\t\t\t\t\tif ( _colorMode == COLOR_BAR_LEVEL || isTrueLeds )\n\t\t\t\t\t\tsetBarColor( peak );\n\n\t\t\t\t\t// render peak according to current mode / effect\n\t\t\t\t\tif ( isLeds ) {\n\t\t\t\t\t\tconst ledPeak = ledPosY( peak );\n\t\t\t\t\t\tif ( ledPeak >= ledSpaceV ) // avoid peak below first led\n\t\t\t\t\t\t\t_ctx.fillRect( posX, analyzerBottom - ledPeak, width, ledHeight );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( ! _radial )\n\t\t\t\t\t\t_ctx.fillRect( posX, analyzerBottom - peak * maxBarHeight, width, 2 );\n\t\t\t\t\telse if ( _mode != MODE_GRAPH ) { // radial (peaks for graph mode are done by the peakLine code)\n\t\t\t\t\t\tconst y = peak * maxBarHeight;\n\t\t\t\t\t\tradialPoly( posX, y, width, ! this._radialInvert || isDualVertical || y + innerRadius >= 2 ? -2 : 2 );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} // for ( let barIndex = 0; barIndex < nBars; barIndex++ )\n\n\t\t\t// if not using the canvas, move earlier to the next channel\n\t\t\tif ( ! useCanvas )\n\t\t\t\tcontinue;\n\n\t\t\t// restore global alpha\n\t\t\t_ctx.globalAlpha = 1;\n\n\t\t\t// Fill/stroke drawing path for graph mode\n\t\t\tif ( _mode == MODE_GRAPH ) {\n\t\t\t\tsetBarColor(); // select channel gradient\n\n\t\t\t\tif ( _radial && ! isDualHorizontal ) {\n\t\t\t\t\tif ( _mirror ) {\n\t\t\t\t\t\tlet p;\n\t\t\t\t\t\twhile ( p = points.pop() )\n\t\t\t\t\t\t\t_ctx.lineTo( ...radialXY( ...p, -1 ) );\n\t\t\t\t\t}\n\t\t\t\t\t_ctx.closePath();\n\t\t\t\t}\n\n\t\t\t\tif ( _lineWidth > 0 )\n\t\t\t\t\t_ctx.stroke();\n\n\t\t\t\tif ( fillAlpha > 0 ) {\n\t\t\t\t\tif ( _radial ) {\n\t\t\t\t\t\t// exclude the center circle from the fill area\n\t\t\t\t\t\tconst start = isDualHorizontal ? getAngle( analyzerWidth >> 1 ) : 0,\n\t\t\t\t\t\t\t  end   = isDualHorizontal ? getAngle( analyzerWidth ) : TAU;\n\t\t\t\t\t\t_ctx.moveTo( ...radialXY( isDualHorizontal ? analyzerWidth >> 1 : 0, 0 ) );\n\t\t\t\t\t\t_ctx.arc( centerX, centerY, innerRadius, start, end, isDualHorizontal ? ! invertedChannel : true );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// close the fill area\n\t\t\t\t\t\t_ctx.lineTo( finalX, analyzerBottom );\n\t\t\t\t\t\t_ctx.lineTo( initialX, analyzerBottom );\n\t\t\t\t\t}\n\n\t\t\t\t\t_ctx.globalAlpha = fillAlpha;\n\t\t\t\t\t_ctx.fill();\n\t\t\t\t\t_ctx.globalAlpha = 1;\n\t\t\t\t}\n\n\t\t\t\t// draw peak line (and standard peaks on radial)\n\t\t\t\tif ( showPeakLine || ( _radial && showPeaks ) ) {\n\t\t\t\t\tpoints = []; // for mirror line on radial\n\t\t\t\t\t_ctx.beginPath();\n\t\t\t\t\t_bars.forEach( ( b, i ) => {\n\t\t\t\t\t\tlet x = b.posX,\n\t\t\t\t\t\t\th = b.peak[ channel ],\n\t\t\t\t\t\t\tm = i ? 'lineTo' : 'moveTo';\n\t\t\t\t\t\tif ( _radial && x < 0 ) {\n\t\t\t\t\t\t\tconst nextBar = _bars[ i + 1 ];\n\t\t\t\t\t\t\th = findY( x, h, nextBar.posX, nextBar.peak[ channel ], 0 );\n\t\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\th *= maxBarHeight;\n\t\t\t\t\t\tif ( showPeakLine ) {\n\t\t\t\t\t\t\t_ctx[ m ]( ...( _radial ? radialXY( x, h ) : [ x, analyzerBottom - h ] ) );\n\t\t\t\t\t\t\tif ( _radial && _mirror && ! isDualHorizontal )\n\t\t\t\t\t\t\t\tpoints.push( [ x, h ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( h > 0 )\n\t\t\t\t\t\t\tradialPoly( x, h, 1, -2 ); // standard peaks (also does mirror)\n\t\t\t\t\t});\n\t\t\t\t\tif ( showPeakLine ) {\n\t\t\t\t\t\tlet p;\n\t\t\t\t\t\twhile ( p = points.pop() )\n\t\t\t\t\t\t\t_ctx.lineTo( ...radialXY( ...p, -1 ) ); // mirror line points\n\t\t\t\t\t\t_ctx.lineWidth = 1;\n\t\t\t\t\t\t_ctx.stroke(); // stroke peak line\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_ctx.restore(); // restore clip region\n\n\t\t\tif ( isDualHorizontal && ! _radial )\n\t\t\t\t_ctx.setTransform( 1, 0, 0, 1, 0, 0 );\n\n\t\t\t// create Reflex effect - for dual-combined and dual-horizontal do it only once, after channel 1\n\t\t\tif ( ( ! isDualHorizontal && ! isDualCombined ) || channel )\n\t\t\t\tdoReflex( channel );\n\n\t\t} // for ( let channel = 0; channel < nChannels; channel++ ) {\n\n\t\tupdateEnergy( currentEnergy / ( nBars << ( nChannels - 1 ) ) );\n\n\t\tif ( useCanvas ) {\n\t\t\t// Mirror effect\n\t\t\tif ( _mirror && ! _radial && ! isDualHorizontal ) {\n\t\t\t\t_ctx.setTransform( -1, 0, 0, 1, canvas.width - initialX, 0 );\n\t\t\t\t_ctx.drawImage( canvas, initialX, 0, centerX, canvas.height, 0, 0, centerX, canvas.height );\n\t\t\t\t_ctx.setTransform( 1, 0, 0, 1, 0, 0 );\n\t\t\t}\n\n\t\t\t// restore solid lines\n\t\t\t_ctx.setLineDash([]);\n\n\t\t\t// draw frequency scale (X-axis)\n\t\t\tdrawScaleX();\n\t\t}\n\n\t\t// display current frame rate\n\t\tif ( this.showFPS ) {\n\t\t\tconst size = canvasX.height;\n\t\t\t_ctx.font = `bold ${size}px ${FONT_FAMILY}`;\n\t\t\t_ctx.fillStyle = FPS_COLOR;\n\t\t\t_ctx.textAlign = 'right';\n\t\t\t_ctx.fillText( Math.round( _fps ), canvas.width - size, size * 2 );\n\t\t}\n\n\t\t// call callback function, if defined\n\t\tif ( this.onCanvasDraw ) {\n\t\t\t_ctx.save();\n\t\t\t_ctx.fillStyle = _ctx.strokeStyle = _canvasGradients[0];\n\t\t\tthis.onCanvasDraw( this, { timestamp, canvasGradients: _canvasGradients } );\n\t\t\t_ctx.restore();\n\t\t}\n\t}\n\n\t/**\n\t * Return scaled frequency according to the selected scale\n\t */\n\t_freqScaling( freq ) {\n\t\tswitch ( this._frequencyScale ) {\n\t\t\tcase SCALE_LOG :\n\t\t\t\treturn Math.log2( freq );\n\t\t\tcase SCALE_BARK :\n\t\t\t\treturn ( 26.81 * freq ) / ( 1960 + freq ) - .53;\n\t\t\tcase SCALE_MEL :\n\t\t\t\treturn Math.log2( 1 + freq / 700 );\n\t\t\tcase SCALE_LINEAR :\n\t\t\t\treturn freq;\n\t\t}\n\t}\n\n\t/**\n\t * Return the FFT data bin (array index) which represents a given frequency\n\t */\n\t_freqToBin( freq, method = 'round' ) {\n\t\tconst max = this._analyzer[0].frequencyBinCount - 1,\n\t\t\t  bin = Math[ method ]( freq * this.fftSize / this.audioCtx.sampleRate );\n\n\t\treturn bin < max ? bin : max;\n\t}\n\n\t/**\n\t * Generate currently selected gradient\n\t */\n\t_makeGrad() {\n\t\tif ( ! this._ready )\n\t\t\treturn;\n\n\t\tconst { canvas, _ctx, _radial, _reflexRatio } = this,\n\t\t\t  { analyzerWidth, centerX, centerY, initialX, innerRadius, outerRadius } = this._aux,\n\t\t\t  { isLumi }     = this._flg,\n\t\t\t  isDualVertical = this._chLayout == CHANNEL_VERTICAL,\n\t\t\t  analyzerRatio  = 1 - _reflexRatio,\n\t\t\t  gradientHeight = isLumi ? canvas.height : canvas.height * ( 1 - _reflexRatio * ( ! isDualVertical ) ) | 0;\n\t\t\t  \t\t\t\t   // for vertical stereo we keep the full canvas height and handle the reflex areas while generating the color stops\n\n\t\tfor ( const channel of [0,1] ) {\n\t\t\tconst currGradient = this._gradients[ this._selectedGrads[ channel ] ],\n\t\t\t\t  colorStops   = currGradient.colorStops,\n\t\t\t\t  isHorizontal = currGradient.dir == 'h';\n\n\t\t\tlet grad;\n\n\t\t\tif ( _radial )\n\t\t\t\tgrad = _ctx.createRadialGradient( centerX, centerY, outerRadius, centerX, centerY, innerRadius - ( outerRadius - innerRadius ) * isDualVertical );\n\t\t\telse\n\t\t\t\tgrad = _ctx.createLinearGradient( ...( isHorizontal ? [ initialX, 0, initialX + analyzerWidth, 0 ] : [ 0, 0, 0, gradientHeight ] ) );\n\n\t\t\tif ( colorStops ) {\n\t\t\t\tconst dual = isDualVertical && ! this._splitGradient && ( ! isHorizontal || _radial );\n\n\t\t\t\tfor ( let channelArea = 0; channelArea < 1 + dual; channelArea++ ) {\n\t\t\t\t\tconst maxIndex = colorStops.length - 1;\n\n\t\t\t\t\tcolorStops.forEach( ( colorStop, index ) => {\n\t\t\t\t\t\tlet offset = colorStop.pos;\n\n\t\t\t\t\t\t// in dual mode (not split), use half the original offset for each channel\n\t\t\t\t\t\tif ( dual )\n\t\t\t\t\t\t\toffset /= 2;\n\n\t\t\t\t\t\t// constrain the offset within the useful analyzer areas (avoid reflex areas)\n\t\t\t\t\t\tif ( isDualVertical && ! isLumi && ! _radial && ! isHorizontal ) {\n\t\t\t\t\t\t\toffset *= analyzerRatio;\n\t\t\t\t\t\t\t// skip the first reflex area in split mode\n\t\t\t\t\t\t\tif ( ! dual && offset > .5 * analyzerRatio )\n\t\t\t\t\t\t\t\toffset += .5 * _reflexRatio;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// only for dual-vertical non-split gradient (creates full gradient on both halves of the canvas)\n\t\t\t\t\t\tif ( channelArea == 1 ) {\n\t\t\t\t\t\t\t// add colors in reverse order if radial or lumi are active\n\t\t\t\t\t\t\tif ( _radial || isLumi ) {\n\t\t\t\t\t\t\t\tconst revIndex = maxIndex - index;\n\t\t\t\t\t\t\t\tcolorStop = colorStops[ revIndex ];\n\t\t\t\t\t\t\t\toffset = 1 - colorStop.pos / 2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// if the first offset is not 0, create an additional color stop to prevent bleeding from the first channel\n\t\t\t\t\t\t\t\tif ( index == 0 && offset > 0 )\n\t\t\t\t\t\t\t\t\tgrad.addColorStop( .5, colorStop.color );\n\t\t\t\t\t\t\t\t// bump the offset to the second half of the gradient\n\t\t\t\t\t\t\t\toffset += .5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// add gradient color stop\n\t\t\t\t\t\tgrad.addColorStop( offset, colorStop.color );\n\n\t\t\t\t\t\t// create additional color stop at the end of first channel to prevent bleeding\n\t\t\t\t\t\tif ( isDualVertical && index == maxIndex && offset < .5 )\n\t\t\t\t\t\t\tgrad.addColorStop( .5, colorStop.color );\n\t\t\t\t\t});\n\t\t\t\t} // for ( let channelArea = 0; channelArea < 1 + dual; channelArea++ )\n\t\t\t}\n\n\t\t\tthis._canvasGradients[ channel ] = grad;\n\t\t} // for ( const channel of [0,1] )\n\t}\n\n\t/**\n\t * Normalize a dB value in the [0;1] range\n\t */\n\t_normalizedB( value ) {\n\t\tconst isLinear   = this._linearAmplitude,\n\t\t\t  boost      = isLinear ? 1 / this._linearBoost : 1,\n\t\t\t  clamp      = ( val, min, max ) => val <= min ? min : val >= max ? max : val,\n\t\t\t  dBToLinear = val => 10 ** ( val / 20 );\n\n\t\tlet maxValue = this.maxDecibels,\n\t\t\tminValue = this.minDecibels;\n\n\t\tif ( isLinear ) {\n\t\t\tmaxValue = dBToLinear( maxValue );\n\t\t\tminValue = dBToLinear( minValue );\n\t\t\tvalue = dBToLinear( value ) ** boost;\n\t\t}\n\n\t\treturn clamp( ( value - minValue ) / ( maxValue - minValue ) ** boost, 0, 1 );\n\t}\n\n\t/**\n\t * Internal function to change canvas dimensions on demand\n\t */\n\t_setCanvas( reason ) {\n\t\tif ( ! this._ready )\n\t\t\treturn;\n\n\t\tconst { canvas, _ctx } = this,\n\t\t\t  canvasX    = this._scaleX.canvas,\n\t\t\t  pixelRatio = window.devicePixelRatio / ( this._loRes + 1 );\n\n\t\tlet screenWidth  = window.screen.width  * pixelRatio,\n\t\t\tscreenHeight = window.screen.height * pixelRatio;\n\n\t\t// Fix for iOS Safari - swap width and height when in landscape\n\t\tif ( Math.abs( window.orientation ) == 90 && screenWidth < screenHeight )\n\t\t\t[ screenWidth, screenHeight ] = [ screenHeight, screenWidth ];\n\n\t\tconst isFullscreen = this.isFullscreen,\n\t\t\t  isCanvasFs   = isFullscreen && this._fsEl == canvas,\n\t\t\t  newWidth     = isCanvasFs ? screenWidth  : ( this._width  || this._container.clientWidth  || this._defaultWidth  ) * pixelRatio | 0,\n\t\t\t  newHeight    = isCanvasFs ? screenHeight : ( this._height || this._container.clientHeight || this._defaultHeight ) * pixelRatio | 0;\n\n\t\t// set/update object properties\n\t\tthis._pixelRatio = pixelRatio;\n\t\tthis._fsWidth    = screenWidth;\n\t\tthis._fsHeight   = screenHeight;\n\n\t\t// if this is not the constructor call and canvas dimensions haven't changed, quit\n\t\tif ( reason != REASON_CREATE && canvas.width == newWidth && canvas.height == newHeight )\n\t\t\treturn;\n\n\t\t// apply new dimensions\n\t\tcanvas.width  = newWidth;\n\t\tcanvas.height = newHeight;\n\n\t\t// if not in overlay mode, paint the canvas black\n\t\tif ( ! this.overlay ) {\n\t\t\t_ctx.fillStyle = '#000';\n\t\t\t_ctx.fillRect( 0, 0, newWidth, newHeight );\n\t\t}\n\n\t\t// set lineJoin property for area fill mode (this is reset whenever the canvas size changes)\n\t\t_ctx.lineJoin = 'bevel';\n\n\t\t// update dimensions of the scale canvas\n\t\tcanvasX.width = newWidth;\n\t\tcanvasX.height = Math.max( 20 * pixelRatio, Math.min( newWidth, newHeight ) / 32 | 0 );\n\n\t\t// calculate bar positions and led options\n\t\tthis._calcBars();\n\n\t\t// (re)generate gradient\n\t\tthis._makeGrad();\n\n\t\t// detect fullscreen changes (for Safari)\n\t\tif ( this._fsStatus !== undefined && this._fsStatus !== isFullscreen )\n\t\t\treason = REASON_FSCHANGE;\n\t\tthis._fsStatus = isFullscreen;\n\n\t\t// call the callback function, if defined\n\t\tif ( this.onCanvasResize )\n\t\t\tthis.onCanvasResize( reason, this );\n\t}\n\n\t/**\n\t * Select a gradient for one or both channels\n\t *\n\t * @param {string} name gradient name\n\t * @param [{number}] desired channel (0 or 1) - if empty or invalid, sets both channels\n\t */\n\t_setGradient( name, channel ) {\n\t\tif ( ! this._gradients.hasOwnProperty( name ) )\n\t\t\tthrow new AudioMotionError( ERR_UNKNOWN_GRADIENT, name );\n\n\t\tif ( ! [0,1].includes( channel ) ) {\n\t\t\tthis._selectedGrads[1] = name;\n\t\t\tchannel = 0;\n\t\t}\n\n\t\tthis._selectedGrads[ channel ] = name;\n\t\tthis._makeGrad();\n\t}\n\n\t/**\n\t * Set object properties\n\t */\n\t_setProps( options, useDefaults ) {\n\t\t// callback functions properties\n\t\tconst callbacks = [ 'onCanvasDraw', 'onCanvasResize' ];\n\n\t\t// properties not in the defaults (`stereo` is deprecated)\n\t\tconst extraProps = [ 'gradientLeft', 'gradientRight', 'stereo' ];\n\n\t\t// build an array of valid properties; `start` is not an actual property and is handled after setting everything else\n\t\tconst validProps = Object.keys( DEFAULT_SETTINGS ).filter( e => e != 'start' ).concat( callbacks, extraProps );\n\n\t\tif ( useDefaults || options === undefined )\n\t\t\toptions = { ...DEFAULT_SETTINGS, ...options }; // merge options with defaults\n\n\t\tfor ( const prop of Object.keys( options ) ) {\n\t\t\tif ( callbacks.includes( prop ) && typeof options[ prop ] !== 'function' ) // check invalid callback\n\t\t\t\tthis[ prop ] = undefined;\n\t\t\telse if ( validProps.includes( prop ) ) // set only valid properties\n\t\t\t\tthis[ prop ] = options[ prop ];\n\t\t}\n\n\t\t// deprecated - move this to the constructor in the next major release (`start` should be constructor-specific)\n\t\tif ( options.start !== undefined )\n\t\t\tthis.toggleAnalyzer( options.start );\n\t}\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/audiomotion-analyzer/src/audioMotion-analyzer.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;