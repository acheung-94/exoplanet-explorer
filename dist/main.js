/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/view */ \"./src/scripts/view.js\");\nconsole.log(`hello!`);\n\n\nfunction randomRARange() {\n  let ra1 = Math.floor(Math.random() * 360);\n  let ra2 = ra1 + 5;\n  if (ra2 >= 360) ra2 = 360;\n  return `ra between ${ra1} and ${ra2}`;\n}\nfunction generateURL() {\n  const url = `https://exoplanetarchive.ipac.caltech.edu/TAP/sync?query=`;\n  let dec = `between 0 and 180`;\n  let raRange = `${randomRARange()}`;\n  let query = `select * from pscomppars where sy_snum = 1 and sy_pnum >= 2 and ${raRange} and dec ${dec}`;\n  query = query.split(\" \").join(\"+\");\n  let result = encodeURIComponent(`${url}${query}&format=json`);\n  return result;\n}\nfunction groupByHostName(data) {\n  let hostNames = []; // unique host systems\n  let allSystems = [];\n  if (data.length) {\n    // in the future this shouldn't be necessary. this will only be called if data.length > 0\n    data.forEach(record => {\n      if (record.hostname && !hostNames.includes(record.hostname)) {\n        hostNames.push(record.hostname);\n      }\n    });\n    hostNames.forEach(name => {\n      let system = [];\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].hostname === name) {\n          system.push(data[i]);\n        }\n      }\n      allSystems.push(system);\n    });\n  }\n  return allSystems;\n}\n\n//finally!\n\nlet canvas = document.querySelector('.background'); // i think I want two canvases... one for background and one for animation... that sounds like a good idea.\ncanvas.height = 600;\ncanvas.width = 600;\nlet ctx = canvas.getContext('2d');\nctx.fillStyle = \"black\";\nctx.fillRect(0, 0, canvas.width, canvas.height);\n// let view = new View(canvas) // will be obsolete do not keep\n// view.draw(ctx)\n\n// this purpose of this queue is to cache my queries.. they're expensive and take a long time to run!! I don't wnat to do that every time a user wants to generate a new result.\nlet starSystemQueue = [];\nlet key;\nconst button = document.querySelector(\"button\");\nbutton.addEventListener(\"click\", function () {\n  clearInterval(key);\n  if (starSystemQueue.length < 2) {\n    let starSystem = starSystemQueue.shift();\n    console.log(`starSystemQueue should be empty: ${starSystemQueue}`);\n    getStarSystemData(); //hit the api and refresh the queue in the background. \n\n    let view = new _scripts_view__WEBPACK_IMPORTED_MODULE_0__[\"default\"](starSystem, canvas);\n    key = setInterval(view.animate(), 20);\n  } else {\n    //clearInterval(key)\n    let starSystem = starSystemQueue.shift();\n    let view = new _scripts_view__WEBPACK_IMPORTED_MODULE_0__[\"default\"](starSystem, canvas);\n    key = setInterval(() => view.animate(), 20);\n  }\n});\n\n//name this function to invoke inside the event handler.. do i need to designate it as an async function? :/ I do want it to repopulate the queue in the background... \n// well let's just start with it being a normal function that returns something I can save to a variable & concat to the Queue.\n\nfunction getStarSystemData() {\n  return fetch(`https://cors-proxy-xphi.onrender.com/?url=` + generateURL()).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n  }).then(data => {\n    if (data.length) {\n      // ie if length is not zero\n      console.log(`data.length > 0 .. returning now`);\n      console.log(groupByHostName(data));\n      return groupByHostName(data);\n    } else {\n      // if data.lenght is zero (falsy)\n      console.log(`came up empty, trying again`);\n      return getStarSystemData();\n      //recursively call itself until data.length > 0\n    }\n  }).then(sortedData => {\n    if (sortedData) {\n      starSystemQueue = starSystemQueue.concat(sortedData);\n      console.log(starSystemQueue);\n    }\n  }).catch(err => console.error(err));\n}\ngetStarSystemData();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TyxDQUFDQyxHQUFHLENBQUUsa0NBQWlDLENBQUM7TUFDL0NELE9BQU8sQ0FBQ0MsR0FBRyxDQUFDa0IsZUFBZSxDQUFDQyxJQUFJLENBQUMsQ0FBQztNQUNsQyxPQUFPRCxlQUFlLENBQUNDLElBQUksQ0FBQztJQUNoQyxDQUFDLE1BQUk7TUFBRTtNQUNIcEIsT0FBTyxDQUFDQyxHQUFHLENBQUUsNkJBQTRCLENBQUM7TUFDMUMsT0FBTytDLGlCQUFpQixDQUFDLENBQUM7TUFDMUI7SUFDSjtFQUNKLENBQUMsQ0FBQyxDQUFDSyxJQUFJLENBQUdJLFVBQVUsSUFBRztJQUNuQixJQUFJQSxVQUFVLEVBQUU7TUFDWmhCLGVBQWUsR0FBR0EsZUFBZSxDQUFDaUIsTUFBTSxDQUFDRCxVQUFVLENBQUM7TUFDcER6RCxPQUFPLENBQUNDLEdBQUcsQ0FBQ3dDLGVBQWUsQ0FBQztJQUNoQztFQUNKLENBQUMsQ0FBQyxDQUFDa0IsS0FBSyxDQUFFQyxHQUFHLElBQUk1RCxPQUFPLENBQUM2RCxLQUFLLENBQUNELEdBQUcsQ0FBQyxDQUFDO0FBQzVDO0FBRUFaLGlCQUFpQixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy1leG9wbGFuZXQtZXhwbG9yZXIvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZyhgaGVsbG8hYClcblxuaW1wb3J0IFZpZXcgZnJvbSBcIi4vc2NyaXB0cy92aWV3XCI7XG5pbXBvcnQgcmVuZGVyT2JqZWN0cyBmcm9tIFwiLi9zY3JpcHRzL3ZpZXdcIlxuXG5mdW5jdGlvbiByYW5kb21SQVJhbmdlKCkge1xuICAgIGxldCByYTEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzNjApXG4gICAgbGV0IHJhMiA9IHJhMSArIDVcbiAgICBpZiAocmEyID49IDM2MCkgcmEyID0gMzYwO1xuICAgIHJldHVybiBgcmEgYmV0d2VlbiAke3JhMX0gYW5kICR7cmEyfWBcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVVUkwoKXtcbiAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9leG9wbGFuZXRhcmNoaXZlLmlwYWMuY2FsdGVjaC5lZHUvVEFQL3N5bmM/cXVlcnk9YFxuICAgIGxldCBkZWMgPSBgYmV0d2VlbiAwIGFuZCAxODBgXG4gICAgbGV0IHJhUmFuZ2UgPSBgJHtyYW5kb21SQVJhbmdlKCl9YFxuICAgIGxldCBxdWVyeSA9IGBzZWxlY3QgKiBmcm9tIHBzY29tcHBhcnMgd2hlcmUgc3lfc251bSA9IDEgYW5kIHN5X3BudW0gPj0gMiBhbmQgJHtyYVJhbmdlfSBhbmQgZGVjICR7ZGVjfWBcbiAgICBxdWVyeSA9IHF1ZXJ5LnNwbGl0KFwiIFwiKS5qb2luKFwiK1wiKVxuICAgIGxldCByZXN1bHQgPSBlbmNvZGVVUklDb21wb25lbnQoYCR7dXJsfSR7cXVlcnl9JmZvcm1hdD1qc29uYClcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIGdyb3VwQnlIb3N0TmFtZShkYXRhKXtcbiAgICBsZXQgaG9zdE5hbWVzID0gW10gLy8gdW5pcXVlIGhvc3Qgc3lzdGVtc1xuICAgIGxldCBhbGxTeXN0ZW1zID0gW11cbiAgICBpZiAoZGF0YS5sZW5ndGgpeyAvLyBpbiB0aGUgZnV0dXJlIHRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeS4gdGhpcyB3aWxsIG9ubHkgYmUgY2FsbGVkIGlmIGRhdGEubGVuZ3RoID4gMFxuICAgICAgICBkYXRhLmZvckVhY2goIChyZWNvcmQpID0+e1xuICAgICAgICBpZiAocmVjb3JkLmhvc3RuYW1lICYmICFob3N0TmFtZXMuaW5jbHVkZXMocmVjb3JkLmhvc3RuYW1lKSl7XG4gICAgICAgICAgICBob3N0TmFtZXMucHVzaChyZWNvcmQuaG9zdG5hbWUpXG4gICAgICAgIH1cbiAgICB9KVxuICAgIGhvc3ROYW1lcy5mb3JFYWNoKChuYW1lKT0+e1xuICAgICAgICBsZXQgc3lzdGVtID0gW11cbiAgICAgICAgZm9yKGxldCBpPTA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGlmIChkYXRhW2ldLmhvc3RuYW1lID09PSBuYW1lKXtcbiAgICAgICAgICAgICAgICBzeXN0ZW0ucHVzaChkYXRhW2ldKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFsbFN5c3RlbXMucHVzaChzeXN0ZW0pXG4gICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gYWxsU3lzdGVtc1xufVxuXG4vL2ZpbmFsbHkhXG5cbmxldCBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmFja2dyb3VuZCcpIC8vIGkgdGhpbmsgSSB3YW50IHR3byBjYW52YXNlcy4uLiBvbmUgZm9yIGJhY2tncm91bmQgYW5kIG9uZSBmb3IgYW5pbWF0aW9uLi4uIHRoYXQgc291bmRzIGxpa2UgYSBnb29kIGlkZWEuXG5jYW52YXMuaGVpZ2h0ID0gNjAwXG5jYW52YXMud2lkdGggPSA2MDBcbmxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIlxuY3R4LmZpbGxSZWN0KDAsMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KVxuLy8gbGV0IHZpZXcgPSBuZXcgVmlldyhjYW52YXMpIC8vIHdpbGwgYmUgb2Jzb2xldGUgZG8gbm90IGtlZXBcbi8vIHZpZXcuZHJhdyhjdHgpXG5cbi8vIHRoaXMgcHVycG9zZSBvZiB0aGlzIHF1ZXVlIGlzIHRvIGNhY2hlIG15IHF1ZXJpZXMuLiB0aGV5J3JlIGV4cGVuc2l2ZSBhbmQgdGFrZSBhIGxvbmcgdGltZSB0byBydW4hISBJIGRvbid0IHduYXQgdG8gZG8gdGhhdCBldmVyeSB0aW1lIGEgdXNlciB3YW50cyB0byBnZW5lcmF0ZSBhIG5ldyByZXN1bHQuXG5sZXQgc3RhclN5c3RlbVF1ZXVlID0gW11cbmxldCBrZXk7XG5cbmNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJidXR0b25cIilcbmJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcbiAgICBjbGVhckludGVydmFsKGtleSlcbiAgICBpZiAoc3RhclN5c3RlbVF1ZXVlLmxlbmd0aCA8IDIpe1xuICAgICAgICBsZXQgc3RhclN5c3RlbSA9IHN0YXJTeXN0ZW1RdWV1ZS5zaGlmdCgpXG4gICAgICAgIGNvbnNvbGUubG9nKGBzdGFyU3lzdGVtUXVldWUgc2hvdWxkIGJlIGVtcHR5OiAke3N0YXJTeXN0ZW1RdWV1ZX1gKVxuICAgICAgICBnZXRTdGFyU3lzdGVtRGF0YSgpIC8vaGl0IHRoZSBhcGkgYW5kIHJlZnJlc2ggdGhlIHF1ZXVlIGluIHRoZSBiYWNrZ3JvdW5kLiBcbiAgICAgICAgXG4gICAgICAgIGxldCB2aWV3ID0gbmV3IFZpZXcoc3RhclN5c3RlbSwgY2FudmFzKVxuICAgICAgICBrZXkgPSBzZXRJbnRlcnZhbCh2aWV3LmFuaW1hdGUoKSwgMjApXG4gICAgfWVsc2Uge1xuICAgICAgICAvL2NsZWFySW50ZXJ2YWwoa2V5KVxuICAgICAgICBsZXQgc3RhclN5c3RlbSA9IHN0YXJTeXN0ZW1RdWV1ZS5zaGlmdCgpXG4gICAgICAgIGxldCB2aWV3ID0gbmV3IFZpZXcoc3RhclN5c3RlbSwgY2FudmFzKVxuICAgICAgICBrZXkgPSBzZXRJbnRlcnZhbCgoKSA9PiB2aWV3LmFuaW1hdGUoKSwgMjApXG4gICAgfVxufSlcblxuLy9uYW1lIHRoaXMgZnVuY3Rpb24gdG8gaW52b2tlIGluc2lkZSB0aGUgZXZlbnQgaGFuZGxlci4uIGRvIGkgbmVlZCB0byBkZXNpZ25hdGUgaXQgYXMgYW4gYXN5bmMgZnVuY3Rpb24/IDovIEkgZG8gd2FudCBpdCB0byByZXBvcHVsYXRlIHRoZSBxdWV1ZSBpbiB0aGUgYmFja2dyb3VuZC4uLiBcbi8vIHdlbGwgbGV0J3MganVzdCBzdGFydCB3aXRoIGl0IGJlaW5nIGEgbm9ybWFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBzb21ldGhpbmcgSSBjYW4gc2F2ZSB0byBhIHZhcmlhYmxlICYgY29uY2F0IHRvIHRoZSBRdWV1ZS5cblxuZnVuY3Rpb24gZ2V0U3RhclN5c3RlbURhdGEoKXtcbiAgICByZXR1cm4gZmV0Y2goYGh0dHBzOi8vY29ycy1wcm94eS14cGhpLm9ucmVuZGVyLmNvbS8/dXJsPWAgKyBnZW5lcmF0ZVVSTCgpKVxuICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzLm9rKXtcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoKSB7IC8vIGllIGlmIGxlbmd0aCBpcyBub3QgemVyb1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBkYXRhLmxlbmd0aCA+IDAgLi4gcmV0dXJuaW5nIG5vd2ApXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZ3JvdXBCeUhvc3ROYW1lKGRhdGEpKVxuICAgICAgICAgICAgICAgIHJldHVybiBncm91cEJ5SG9zdE5hbWUoZGF0YSlcbiAgICAgICAgICAgIH1lbHNleyAvLyBpZiBkYXRhLmxlbmdodCBpcyB6ZXJvIChmYWxzeSlcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgY2FtZSB1cCBlbXB0eSwgdHJ5aW5nIGFnYWluYClcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U3RhclN5c3RlbURhdGEoKVxuICAgICAgICAgICAgICAgIC8vcmVjdXJzaXZlbHkgY2FsbCBpdHNlbGYgdW50aWwgZGF0YS5sZW5ndGggPiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4oIChzb3J0ZWREYXRhKT0+e1xuICAgICAgICAgICAgaWYgKHNvcnRlZERhdGEpIHtcbiAgICAgICAgICAgICAgICBzdGFyU3lzdGVtUXVldWUgPSBzdGFyU3lzdGVtUXVldWUuY29uY2F0KHNvcnRlZERhdGEpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3RhclN5c3RlbVF1ZXVlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaCgoZXJyKT0+IGNvbnNvbGUuZXJyb3IoZXJyKSlcbn1cblxuZ2V0U3RhclN5c3RlbURhdGEoKVxuXG5cblxuIl0sIm5hbWVzIjpbImNvbnNvbGUiLCJsb2ciLCJWaWV3IiwicmVuZGVyT2JqZWN0cyIsInJhbmRvbVJBUmFuZ2UiLCJyYTEiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJyYTIiLCJnZW5lcmF0ZVVSTCIsInVybCIsImRlYyIsInJhUmFuZ2UiLCJxdWVyeSIsInNwbGl0Iiwiam9pbiIsInJlc3VsdCIsImVuY29kZVVSSUNvbXBvbmVudCIsImdyb3VwQnlIb3N0TmFtZSIsImRhdGEiLCJob3N0TmFtZXMiLCJhbGxTeXN0ZW1zIiwibGVuZ3RoIiwiZm9yRWFjaCIsInJlY29yZCIsImhvc3RuYW1lIiwiaW5jbHVkZXMiLCJwdXNoIiwibmFtZSIsInN5c3RlbSIsImkiLCJjYW52YXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJoZWlnaHQiLCJ3aWR0aCIsImN0eCIsImdldENvbnRleHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsInN0YXJTeXN0ZW1RdWV1ZSIsImtleSIsImJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGVhckludGVydmFsIiwic3RhclN5c3RlbSIsInNoaWZ0IiwiZ2V0U3RhclN5c3RlbURhdGEiLCJ2aWV3Iiwic2V0SW50ZXJ2YWwiLCJhbmltYXRlIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwib2siLCJqc29uIiwic29ydGVkRGF0YSIsImNvbmNhdCIsImNhdGNoIiwiZXJyIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/planetaryObj.js":
/*!*************************************!*\
  !*** ./src/scripts/planetaryObj.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Planet {\n  constructor(planetData, hostStar) {\n    this.hostStar = hostStar;\n    this.name = planetData[\"pl_name\"];\n    this.radius = this.scaleRadius(planetData[\"pl_rade\"], hostStar);\n    this.distance = this.scaleDistance(planetData[\"pl_orbsmax\"], hostStar);\n    this.angle = Math.random() * (Math.PI * 2); // random starting angle in radians.\n    this.color = \"pink\"; // planetData[\"pl_insol\"]\n    this.vel = this.angularVelocity(planetData[\"pl_orbper\"]); // radians per frame\n    this.x = hostStar.pos[0] + this.distance * Math.cos(this.angle); // pos updated every time draw gets called.\n    this.y = hostStar.pos[1] + this.distance * Math.sin(this.angle);\n  }\n  scaleRadius(radius, hostStar) {\n    if (radius > 10) {\n      let conversion = hostStar.radius * 0.01;\n      let scaled = radius * conversion;\n      return scaled;\n    } else {\n      return radius;\n    }\n  }\n  scaleDistance(semiMajorAxis, hostStar) {\n    // if smax is null... give it a default value pls.\n    semiMajorAxis ??= 10;\n    if (semiMajorAxis <= 5) {\n      return hostStar.radius + 10 + semiMajorAxis / 10 * 25;\n    } else if (semiMajorAxis > 5 && semiMajorAxis < 100) {\n      return hostStar.radius + 10 + semiMajorAxis / 100 * 50;\n    } else if (semiMajorAxis >= 100 && semiMajorAxis <= 500) {\n      return hostStar.radius + 50 + semiMajorAxis / 10;\n    } else if (semiMajorAxis > 500) {\n      // big distance = 150~200px rad\n      return (semiMajorAxis / 1000 + 0.3) * 200; // ok this is just some made up stuff here but uh... tis the best i can do right now. \n    }\n  }\n  angularVelocity(orbPer) {\n    let velocity = Math.PI * 2 / (orbPer * 50); // equates to radians per frame, ie the amount the planet must move per frame.\n    return velocity;\n  }\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n  }\n  move() {\n    this.angle += this.vel; // add this many radians to the current angle.\n    this.x = this.hostStar.pos[0] + this.distance * Math.cos(this.angle);\n    this.y = this.hostStar.pos[1] + this.distance * Math.sin(this.angle);\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Planet);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDQyxTQUFTLENBQUMsQ0FBQztJQUNmRCxHQUFHLENBQUNFLEdBQUcsQ0FBQyxJQUFJLENBQUNiLENBQUMsRUFBRSxJQUFJLENBQUNHLENBQUMsRUFBRSxJQUFJLENBQUNkLE1BQU0sRUFBRSxDQUFDLEVBQUVLLElBQUksQ0FBQ0UsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNwRGUsR0FBRyxDQUFDRyxTQUFTLEdBQUcsSUFBSSxDQUFDakIsS0FBSztJQUMxQmMsR0FBRyxDQUFDSSxJQUFJLENBQUMsQ0FBQztFQUNkO0VBRUFDLElBQUlBLENBQUEsRUFBRTtJQUNGLElBQUksQ0FBQ3ZCLEtBQUssSUFBSSxJQUFJLENBQUNLLEdBQUcsRUFBQztJQUN2QixJQUFJLENBQUNFLENBQUMsR0FBRyxJQUFJLENBQUNiLFFBQVEsQ0FBQ2MsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFJLElBQUksQ0FBQ1YsUUFBUSxHQUFHRyxJQUFJLENBQUNRLEdBQUcsQ0FBQyxJQUFJLENBQUNULEtBQUssQ0FBRTtJQUN0RSxJQUFJLENBQUNVLENBQUMsR0FBRyxJQUFJLENBQUNoQixRQUFRLENBQUNjLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBSSxJQUFJLENBQUNWLFFBQVEsR0FBR0csSUFBSSxDQUFDVSxHQUFHLENBQUMsSUFBSSxDQUFDWCxLQUFLLENBQUU7RUFDMUU7QUFFSjtBQUVBLCtEQUFlVCxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanMtZXhvcGxhbmV0LWV4cGxvcmVyLy4vc3JjL3NjcmlwdHMvcGxhbmV0YXJ5T2JqLmpzPzI5NGEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5jbGFzcyBQbGFuZXQge1xuICAgIGNvbnN0cnVjdG9yIChwbGFuZXREYXRhLCBob3N0U3Rhcil7XG4gICAgICAgIHRoaXMuaG9zdFN0YXIgPSBob3N0U3RhclxuICAgICAgICB0aGlzLm5hbWUgPSBwbGFuZXREYXRhW1wicGxfbmFtZVwiXVxuICAgICAgICB0aGlzLnJhZGl1cyA9IHRoaXMuc2NhbGVSYWRpdXMocGxhbmV0RGF0YVtcInBsX3JhZGVcIl0sIGhvc3RTdGFyKVxuICAgICAgICB0aGlzLmRpc3RhbmNlID0gdGhpcy5zY2FsZURpc3RhbmNlKHBsYW5ldERhdGFbXCJwbF9vcmJzbWF4XCJdLCBob3N0U3RhcilcbiAgICAgICAgdGhpcy5hbmdsZSA9IChNYXRoLnJhbmRvbSgpICogKE1hdGguUEkqMikpIC8vIHJhbmRvbSBzdGFydGluZyBhbmdsZSBpbiByYWRpYW5zLlxuICAgICAgICB0aGlzLmNvbG9yID0gXCJwaW5rXCIgLy8gcGxhbmV0RGF0YVtcInBsX2luc29sXCJdXG4gICAgICAgIHRoaXMudmVsID0gdGhpcy5hbmd1bGFyVmVsb2NpdHkocGxhbmV0RGF0YVtcInBsX29yYnBlclwiXSkgLy8gcmFkaWFucyBwZXIgZnJhbWVcbiAgICAgICAgdGhpcy54ID0gaG9zdFN0YXIucG9zWzBdICsgKHRoaXMuZGlzdGFuY2UgKiBNYXRoLmNvcyh0aGlzLmFuZ2xlKSkgLy8gcG9zIHVwZGF0ZWQgZXZlcnkgdGltZSBkcmF3IGdldHMgY2FsbGVkLlxuICAgICAgICB0aGlzLnkgPSBob3N0U3Rhci5wb3NbMV0gKyAodGhpcy5kaXN0YW5jZSAqIE1hdGguc2luKHRoaXMuYW5nbGUpKVxuICAgIH1cblxuICAgIHNjYWxlUmFkaXVzKHJhZGl1cywgaG9zdFN0YXIpIHtcblxuICAgICAgICBpZiAocmFkaXVzID4gMTApe1xuICAgICAgICAgICAgbGV0IGNvbnZlcnNpb24gPSBob3N0U3Rhci5yYWRpdXMgKiAwLjAxXG4gICAgICAgICAgICBsZXQgc2NhbGVkID0gcmFkaXVzICogY29udmVyc2lvblxuICAgICAgICAgICAgcmV0dXJuIHNjYWxlZFxuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmFkaXVzXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzY2FsZURpc3RhbmNlKHNlbWlNYWpvckF4aXMsIGhvc3RTdGFyKSB7Ly8gaWYgc21heCBpcyBudWxsLi4uIGdpdmUgaXQgYSBkZWZhdWx0IHZhbHVlIHBscy5cbiAgICAgICAgc2VtaU1ham9yQXhpcyA/Pz0gMTBcblxuICAgICAgICBpZiAoc2VtaU1ham9yQXhpcyA8PSA1KXtcbiAgICAgICAgICAgIHJldHVybiBob3N0U3Rhci5yYWRpdXMgKyAxMCArICgoc2VtaU1ham9yQXhpcy8xMCkgKiAyNSlcblxuICAgICAgICB9ZWxzZSBpZiAoc2VtaU1ham9yQXhpcyA+IDUgJiYgc2VtaU1ham9yQXhpcyA8IDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuIGhvc3RTdGFyLnJhZGl1cyArIDEwICsgKChzZW1pTWFqb3JBeGlzIC8gMTAwKSAqIDUwKVxuXG4gICAgICAgIH1lbHNlIGlmIChzZW1pTWFqb3JBeGlzID49IDEwMCAmJiBzZW1pTWFqb3JBeGlzIDw9IDUwMCkge1xuICAgICAgICAgICAgcmV0dXJuIGhvc3RTdGFyLnJhZGl1cyArIDUwICsgKHNlbWlNYWpvckF4aXMgLyAxMClcblxuICAgICAgICB9ZWxzZSBpZiAoc2VtaU1ham9yQXhpcyA+IDUwMCl7IC8vIGJpZyBkaXN0YW5jZSA9IDE1MH4yMDBweCByYWRcbiAgICAgICAgICAgIHJldHVybiAoKChzZW1pTWFqb3JBeGlzIC8gMTAwMCApKyAwLjMpICogMjAwKSAvLyBvayB0aGlzIGlzIGp1c3Qgc29tZSBtYWRlIHVwIHN0dWZmIGhlcmUgYnV0IHVoLi4uIHRpcyB0aGUgYmVzdCBpIGNhbiBkbyByaWdodCBub3cuIFxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBhbmd1bGFyVmVsb2NpdHkgKG9yYlBlcil7XG4gICAgICAgIGxldCB2ZWxvY2l0eSA9ICgoTWF0aC5QSSAqIDIpIC8gKG9yYlBlciAqIDUwKSkgLy8gZXF1YXRlcyB0byByYWRpYW5zIHBlciBmcmFtZSwgaWUgdGhlIGFtb3VudCB0aGUgcGxhbmV0IG11c3QgbW92ZSBwZXIgZnJhbWUuXG4gICAgICAgIHJldHVybiB2ZWxvY2l0eSBcbiAgICB9XG5cbiAgICBkcmF3KGN0eCl7XG5cbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpXG4gICAgICAgIGN0eC5hcmModGhpcy54LCB0aGlzLnksIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJICogMilcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3JcbiAgICAgICAgY3R4LmZpbGwoKVxuICAgIH1cblxuICAgIG1vdmUoKXsgICAgXG4gICAgICAgIHRoaXMuYW5nbGUgKz0gdGhpcy52ZWwgLy8gYWRkIHRoaXMgbWFueSByYWRpYW5zIHRvIHRoZSBjdXJyZW50IGFuZ2xlLlxuICAgICAgICB0aGlzLnggPSB0aGlzLmhvc3RTdGFyLnBvc1swXSArICh0aGlzLmRpc3RhbmNlICogTWF0aC5jb3ModGhpcy5hbmdsZSkpXG4gICAgICAgIHRoaXMueSA9IHRoaXMuaG9zdFN0YXIucG9zWzFdICsgKHRoaXMuZGlzdGFuY2UgKiBNYXRoLnNpbih0aGlzLmFuZ2xlKSkgIFxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGFuZXQ7Il0sIm5hbWVzIjpbIlBsYW5ldCIsImNvbnN0cnVjdG9yIiwicGxhbmV0RGF0YSIsImhvc3RTdGFyIiwibmFtZSIsInJhZGl1cyIsInNjYWxlUmFkaXVzIiwiZGlzdGFuY2UiLCJzY2FsZURpc3RhbmNlIiwiYW5nbGUiLCJNYXRoIiwicmFuZG9tIiwiUEkiLCJjb2xvciIsInZlbCIsImFuZ3VsYXJWZWxvY2l0eSIsIngiLCJwb3MiLCJjb3MiLCJ5Iiwic2luIiwiY29udmVyc2lvbiIsInNjYWxlZCIsInNlbWlNYWpvckF4aXMiLCJvcmJQZXIiLCJ2ZWxvY2l0eSIsImRyYXciLCJjdHgiLCJiZWdpblBhdGgiLCJhcmMiLCJmaWxsU3R5bGUiLCJmaWxsIiwibW92ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/planetaryObj.js\n");

/***/ }),

/***/ "./src/scripts/stellarObj.js":
/*!***********************************!*\
  !*** ./src/scripts/stellarObj.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _planetaryObj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./planetaryObj */ \"./src/scripts/planetaryObj.js\");\n// fixed position. center of canvas\n// scaled radius based on data (st_rad)\n\nclass Star {\n  constructor(canvas, starSystem) {\n    this.pos = [canvas.width / 2, canvas.height / 2];\n    this.class = this.setStellarClass(starSystem[0]);\n    this.radius = this.scaleRadius(starSystem[0][\"st_rad\"]); // given stellar radius in units of radius of the sun, scale to num pixels\n    this.planets = [];\n    this.color = this.scaleColorByTemperature(starSystem[0][\"st_teff\"]);\n    this.addPlanets(starSystem);\n  }\n  setStellarClass(system) {\n    if (system[\"st_spectype\"]) {\n      // some entries have null for spectral type.\n      return system[\"st_spectype\"];\n    } else {\n      // so i have to approximate my own.\n      let kelvin = system[\"st_teff\"];\n      if (kelvin > 30000) {\n        return 'O';\n      } else if (kelvin < 30000 && kelvin > 9700) {\n        return 'B';\n      } else if (kelvin < 9700 && kelvin > 7200) {\n        return 'A';\n      } else if (kelvin < 7200 && kelvin > 5700) {\n        return 'F';\n      } else if (kelvin < 5700 && kelvin > 4900) {\n        return 'G';\n      } else if (kelvin < 4900 && kelvin > 3400) {\n        return 'K';\n      } else if (kelvin < 3400 && kelvin > 2100) {\n        return 'M';\n      }\n    }\n  }\n  scaleColorByTemperature(kelvin) {\n    let r, g, b;\n    if (kelvin > 11000) {\n      // blue\n      r = 222;\n      g = 244;\n      b = 255;\n    } else if (kelvin > 8000 && kelvin < 11000) {\n      //white\n      r = 255;\n      g = 255;\n      b = kelvin / 45;\n    } else if (kelvin > 5000 && kelvin < 8000) {\n      //yellow\n      r = 255;\n      g = kelvin / 30;\n      b = 0;\n    } else if (kelvin > 3500 && kelvin < 5000) {\n      // orange\n      r = 255;\n      g = kelvin / 200;\n      b = 0;\n    } else {\n      // < 3500 k\n      r = 215;\n      g = kelvin / 100;\n      b = 0;\n    }\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n  scaleRadius(radius) {\n    let km = radius * 695700;\n    let scaled = km * 0.00005;\n    if (scaled >= this.pos[1] * 2) {\n      return scaled * 0.3;\n    } else {\n      return scaled;\n    }\n  }\n  addPlanets(starSystem) {\n    starSystem.forEach(planetData => {\n      let planet = new _planetaryObj__WEBPACK_IMPORTED_MODULE_0__[\"default\"](planetData, this);\n      this.planets.push(planet);\n    });\n  }\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.arc(...this.pos, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.shadowColor = this.color;\n    ctx.shadowBlur = Math.random() * 5;\n  }\n  update() {\n    //this will be for updating the chart with new data...\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Star);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/stellarObj.js\n");

/***/ }),

/***/ "./src/scripts/view.js":
/*!*****************************!*\
  !*** ./src/scripts/view.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _stellarObj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stellarObj */ \"./src/scripts/stellarObj.js\");\n//import stellar card, planetary card, and planet/star classes.\n//responsible for taking in stellar system data, creating star and planets, and animating. \n//consider not using an actual View, but export this thing as a collection of functions. \n//starting to think it doesn't really make sense to have it be a class with a instance methods.. \n//the background will likely not change from instance to instance.\n\n\nclass View {\n  constructor(starSystem, canvas) {\n    this.canvas = canvas;\n    console.log(`this should only happen once per button click...`);\n    this.ctx = canvas.getContext(\"2d\");\n    this.starSystem = starSystem;\n    this.hostStar = new _stellarObj__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas, starSystem);\n    this.planets = this.hostStar.planets;\n  }\n  animate() {\n    //update to a different method, nothing is moving yet./\n    this.draw(this.ctx);\n    this.hostStar.draw(this.ctx);\n    this.planets.forEach(planet => {\n      planet.move();\n      planet.draw(this.ctx);\n    });\n  }\n  draw(ctx) {\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy92aWV3LmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFK0I7QUFFL0IsTUFBTUMsSUFBSSxDQUFDO0VBRVBDLFdBQVdBLENBQUVDLFVBQVUsRUFBRUMsTUFBTSxFQUFHO0lBQzlCLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCQyxPQUFPLENBQUNDLEdBQUcsQ0FBRSxrREFBaUQsQ0FBQztJQUMvRCxJQUFJLENBQUNDLEdBQUcsR0FBR0gsTUFBTSxDQUFDSSxVQUFVLENBQUMsSUFBSSxDQUFDO0lBQ2xDLElBQUksQ0FBQ0wsVUFBVSxHQUFHQSxVQUFVO0lBQzVCLElBQUksQ0FBQ00sUUFBUSxHQUFHLElBQUlULG1EQUFJLENBQUNJLE1BQU0sRUFBRUQsVUFBVSxDQUFDO0lBQzVDLElBQUksQ0FBQ08sT0FBTyxHQUFHLElBQUksQ0FBQ0QsUUFBUSxDQUFDQyxPQUFPO0VBQ3hDO0VBRUFDLE9BQU9BLENBQUEsRUFBSTtJQUFDO0lBQ1IsSUFBSSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDTCxHQUFHLENBQUM7SUFDbkIsSUFBSSxDQUFDRSxRQUFRLENBQUNHLElBQUksQ0FBQyxJQUFJLENBQUNMLEdBQUcsQ0FBQztJQUM1QixJQUFJLENBQUNHLE9BQU8sQ0FBQ0csT0FBTyxDQUFJQyxNQUFNLElBQUs7TUFDL0JBLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLENBQUM7TUFDYkQsTUFBTSxDQUFDRixJQUFJLENBQUMsSUFBSSxDQUFDTCxHQUFHLENBQUM7SUFDekIsQ0FBQyxDQUFDO0VBQ047RUFFQUssSUFBSUEsQ0FBQ0wsR0FBRyxFQUFDO0lBQ0xBLEdBQUcsQ0FBQ1MsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDWixNQUFNLENBQUNhLEtBQUssRUFBRSxJQUFJLENBQUNiLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDO0lBQ3pEWCxHQUFHLENBQUNZLFNBQVMsR0FBRyxPQUFPO0lBQ3ZCWixHQUFHLENBQUNhLFFBQVEsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ2hCLE1BQU0sQ0FBQ2EsS0FBSyxFQUFFLElBQUksQ0FBQ2IsTUFBTSxDQUFDYyxNQUFNLENBQUM7RUFDNUQ7QUFFSjtBQUVBLCtEQUFlakIsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2pzLWV4b3BsYW5ldC1leHBsb3Jlci8uL3NyYy9zY3JpcHRzL3ZpZXcuanM/ODBjMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL2ltcG9ydCBzdGVsbGFyIGNhcmQsIHBsYW5ldGFyeSBjYXJkLCBhbmQgcGxhbmV0L3N0YXIgY2xhc3Nlcy5cbi8vcmVzcG9uc2libGUgZm9yIHRha2luZyBpbiBzdGVsbGFyIHN5c3RlbSBkYXRhLCBjcmVhdGluZyBzdGFyIGFuZCBwbGFuZXRzLCBhbmQgYW5pbWF0aW5nLiBcbi8vY29uc2lkZXIgbm90IHVzaW5nIGFuIGFjdHVhbCBWaWV3LCBidXQgZXhwb3J0IHRoaXMgdGhpbmcgYXMgYSBjb2xsZWN0aW9uIG9mIGZ1bmN0aW9ucy4gXG4vL3N0YXJ0aW5nIHRvIHRoaW5rIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gaGF2ZSBpdCBiZSBhIGNsYXNzIHdpdGggYSBpbnN0YW5jZSBtZXRob2RzLi4gXG4vL3RoZSBiYWNrZ3JvdW5kIHdpbGwgbGlrZWx5IG5vdCBjaGFuZ2UgZnJvbSBpbnN0YW5jZSB0byBpbnN0YW5jZS5cblxuaW1wb3J0IFN0YXIgZnJvbSBcIi4vc3RlbGxhck9ialwiXG5cbmNsYXNzIFZpZXcge1xuXG4gICAgY29uc3RydWN0b3IoIHN0YXJTeXN0ZW0sIGNhbnZhcyApIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXNcbiAgICAgICAgY29uc29sZS5sb2coYHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIG9uY2UgcGVyIGJ1dHRvbiBjbGljay4uLmApXG4gICAgICAgIHRoaXMuY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKVxuICAgICAgICB0aGlzLnN0YXJTeXN0ZW0gPSBzdGFyU3lzdGVtXG4gICAgICAgIHRoaXMuaG9zdFN0YXIgPSBuZXcgU3RhcihjYW52YXMsIHN0YXJTeXN0ZW0pXG4gICAgICAgIHRoaXMucGxhbmV0cyA9IHRoaXMuaG9zdFN0YXIucGxhbmV0c1xuICAgIH0gXG5cbiAgICBhbmltYXRlICgpIHsvL3VwZGF0ZSB0byBhIGRpZmZlcmVudCBtZXRob2QsIG5vdGhpbmcgaXMgbW92aW5nIHlldC4vXG4gICAgICAgIHRoaXMuZHJhdyh0aGlzLmN0eClcbiAgICAgICAgdGhpcy5ob3N0U3Rhci5kcmF3KHRoaXMuY3R4KVxuICAgICAgICB0aGlzLnBsYW5ldHMuZm9yRWFjaCAoIChwbGFuZXQpID0+IHtcbiAgICAgICAgICAgIHBsYW5ldC5tb3ZlKClcbiAgICAgICAgICAgIHBsYW5ldC5kcmF3KHRoaXMuY3R4KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGRyYXcoY3R4KXtcbiAgICAgICAgY3R4LmNsZWFyUmVjdCgwLDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCJcbiAgICAgICAgY3R4LmZpbGxSZWN0KDAsMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodClcbiAgICB9XG4gICBcbn1cblxuZXhwb3J0IGRlZmF1bHQgVmlldzsiXSwibmFtZXMiOlsiU3RhciIsIlZpZXciLCJjb25zdHJ1Y3RvciIsInN0YXJTeXN0ZW0iLCJjYW52YXMiLCJjb25zb2xlIiwibG9nIiwiY3R4IiwiZ2V0Q29udGV4dCIsImhvc3RTdGFyIiwicGxhbmV0cyIsImFuaW1hdGUiLCJkcmF3IiwiZm9yRWFjaCIsInBsYW5ldCIsIm1vdmUiLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsImZpbGxTdHlsZSIsImZpbGxSZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/view.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qcy1leG9wbGFuZXQtZXhwbG9yZXIvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;